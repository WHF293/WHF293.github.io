import{_ as e,c as l,o as n,e as a,b as s}from"./app.c7796e3f.js";const A=JSON.parse('{"title":"面试题目-02","description":"","frontmatter":{},"headers":[{"level":2,"title":"es6","slug":"es6","link":"#es6","children":[{"level":3,"title":"Map 和 Set 的区别","slug":"map-和-set-的区别","link":"#map-和-set-的区别","children":[]},{"level":3,"title":"说一下 weekMap 和 weekSet","slug":"说一下-weekmap-和-weekset","link":"#说一下-weekmap-和-weekset","children":[]},{"level":3,"title":"箭头函数和普通函数的区别","slug":"箭头函数和普通函数的区别","link":"#箭头函数和普通函数的区别","children":[]},{"level":3,"title":"分别介绍一下原型、原型链、作用域和作用域链的含义和使用场景","slug":"分别介绍一下原型、原型链、作用域和作用域链的含义和使用场景","link":"#分别介绍一下原型、原型链、作用域和作用域链的含义和使用场景","children":[]}]},{"level":2,"title":"css","slug":"css","link":"#css","children":[{"level":3,"title":"visibility、display、opacity 的区别","slug":"visibility、display、opacity-的区别","link":"#visibility、display、opacity-的区别","children":[]},{"level":3,"title":"transition、transform、translate 的区别","slug":"transition、transform、translate-的区别","link":"#transition、transform、translate-的区别","children":[]},{"level":3,"title":"如何画一条 0.5px 的边框","slug":"如何画一条-0-5px-的边框","link":"#如何画一条-0-5px-的边框","children":[]},{"level":3,"title":"parent 元素宽高不定，实现 scale 固定宽高比始终为 4：3","slug":"parent-元素宽高不定-实现-scale-固定宽高比始终为-4-3","link":"#parent-元素宽高不定-实现-scale-固定宽高比始终为-4-3","children":[]},{"level":3,"title":"CSS 垂直居中的方案","slug":"css-垂直居中的方案","link":"#css-垂直居中的方案","children":[]},{"level":3,"title":"伪元素和伪类的区别","slug":"伪元素和伪类的区别","link":"#伪元素和伪类的区别","children":[]},{"level":3,"title":"说一下盒模型","slug":"说一下盒模型","link":"#说一下盒模型","children":[]},{"level":3,"title":"响应式布局方案","slug":"响应式布局方案","link":"#响应式布局方案","children":[]},{"level":3,"title":"css @layer 是什么","slug":"css-layer-是什么","link":"#css-layer-是什么","children":[]}]},{"level":2,"title":"框架","slug":"框架","link":"#框架","children":[{"level":3,"title":"React-router、vue-router 原理","slug":"react-router、vue-router-原理","link":"#react-router、vue-router-原理","children":[]},{"level":3,"title":"react router 的 Link 标签和 html 的 a 标签有什么区别","slug":"react-router-的-link-标签和-html-的-a-标签有什么区别","link":"#react-router-的-link-标签和-html-的-a-标签有什么区别","children":[]},{"level":3,"title":"vue 和 react 的区别","slug":"vue-和-react-的区别","link":"#vue-和-react-的区别","children":[]},{"level":3,"title":"说一下 css module，以及它的原理","slug":"说一下-css-module-以及它的原理","link":"#说一下-css-module-以及它的原理","children":[]},{"level":3,"title":"react diff 算法和 vue diff 算法的区别","slug":"react-diff-算法和-vue-diff-算法的区别","link":"#react-diff-算法和-vue-diff-算法的区别","children":[]},{"level":3,"title":"SPA 单页面应用和多页面应用有什么区别","slug":"spa-单页面应用和多页面应用有什么区别","link":"#spa-单页面应用和多页面应用有什么区别","children":[]}]},{"level":2,"title":"vue","slug":"vue","link":"#vue","children":[{"level":3,"title":"vue 中 watch 能监听 computed 的属性吗","slug":"vue-中-watch-能监听-computed-的属性吗","link":"#vue-中-watch-能监听-computed-的属性吗","children":[]},{"level":3,"title":"如何解决 vue 初始化页面闪动问题","slug":"如何解决-vue-初始化页面闪动问题","link":"#如何解决-vue-初始化页面闪动问题","children":[]},{"level":3,"title":"说下 nextTick","slug":"说下-nexttick","link":"#说下-nexttick","children":[]},{"level":3,"title":"vue2 template 里为什么不能使用多个头结点？","slug":"vue2-template-里为什么不能使用多个头结点","link":"#vue2-template-里为什么不能使用多个头结点","children":[]},{"level":3,"title":"vue3 的 template 为什么可以多根节点？","slug":"vue3-的-template-为什么可以多根节点","link":"#vue3-的-template-为什么可以多根节点","children":[]},{"level":3,"title":"keep-alive 的原理，使用有什么问题？如何解决","slug":"keep-alive-的原理-使用有什么问题-如何解决","link":"#keep-alive-的原理-使用有什么问题-如何解决","children":[]}]},{"level":2,"title":"react","slug":"react","link":"#react","children":[{"level":3,"title":"setState 是同步还是异步的","slug":"setstate-是同步还是异步的","link":"#setstate-是同步还是异步的","children":[]},{"level":3,"title":"简述一下 fiber 的实现原理","slug":"简述一下-fiber-的实现原理","link":"#简述一下-fiber-的实现原理","children":[]},{"level":3,"title":"fiber 的时间调度通过哪两个原生 api 实现的","slug":"fiber-的时间调度通过哪两个原生-api-实现的","link":"#fiber-的时间调度通过哪两个原生-api-实现的","children":[]},{"level":3,"title":"说下 React 合成事件，以及它是如何实现的","slug":"说下-react-合成事件-以及它是如何实现的","link":"#说下-react-合成事件-以及它是如何实现的","children":[]},{"level":3,"title":"useEffect 的使用方法？","slug":"useeffect-的使用方法","link":"#useeffect-的使用方法","children":[]},{"level":3,"title":"useMemo 和 useCallback 的区别，它们的实现原理是什么？","slug":"usememo-和-usecallback-的区别-它们的实现原理是什么","link":"#usememo-和-usecallback-的区别-它们的实现原理是什么","children":[]},{"level":3,"title":"useEffect、useMemo、useCallback 是如何做依赖收集的","slug":"useeffect、usememo、usecallback-是如何做依赖收集的","link":"#useeffect、usememo、usecallback-是如何做依赖收集的","children":[]},{"level":3,"title":"context 的实现原理是什么？如何做依赖收集？","slug":"context-的实现原理是什么-如何做依赖收集","link":"#context-的实现原理是什么-如何做依赖收集","children":[]},{"level":3,"title":"PureComponent 和 Component 的区别","slug":"purecomponent-和-component-的区别","link":"#purecomponent-和-component-的区别","children":[]},{"level":3,"title":"React dom 绑定事件和原生事件有什么区别","slug":"react-dom-绑定事件和原生事件有什么区别","link":"#react-dom-绑定事件和原生事件有什么区别","children":[]},{"level":3,"title":"说一下对 tree-shaking 的了解，对 CommonJS 和 ESM 都可以用 tree-shaking 吗","slug":"说一下对-tree-shaking-的了解-对-commonjs-和-esm-都可以用-tree-shaking-吗","link":"#说一下对-tree-shaking-的了解-对-commonjs-和-esm-都可以用-tree-shaking-吗","children":[]},{"level":3,"title":"css-loader 的作用是什么？不使用 css-loader 行不行","slug":"css-loader-的作用是什么-不使用-css-loader-行不行","link":"#css-loader-的作用是什么-不使用-css-loader-行不行","children":[]},{"level":3,"title":"webpack 中 plugin 和 laoder 的区别，它们的执行时机，以及常用的 plugin 和 loader","slug":"webpack-中-plugin-和-laoder-的区别-它们的执行时机-以及常用的-plugin-和-loader","link":"#webpack-中-plugin-和-laoder-的区别-它们的执行时机-以及常用的-plugin-和-loader","children":[]}]},{"level":2,"title":"浏览器/网络协议","slug":"浏览器-网络协议","link":"#浏览器-网络协议","children":[{"level":3,"title":"介绍一下 http 缓存","slug":"介绍一下-http-缓存","link":"#介绍一下-http-缓存","children":[]},{"level":3,"title":"说下 requestAnimationFrame","slug":"说下-requestanimationframe","link":"#说下-requestanimationframe","children":[]},{"level":3,"title":"script 标签为什么要放在底部","slug":"script-标签为什么要放在底部","link":"#script-标签为什么要放在底部","children":[]},{"level":3,"title":"defer 和 async 的区别，以及它们的加载和执行时机","slug":"defer-和-async-的区别-以及它们的加载和执行时机","link":"#defer-和-async-的区别-以及它们的加载和执行时机","children":[]},{"level":3,"title":"DOM 事件模型。","slug":"dom-事件模型。","link":"#dom-事件模型。","children":[]},{"level":3,"title":"从输入 url 到页面展示的过程","slug":"从输入-url-到页面展示的过程","link":"#从输入-url-到页面展示的过程","children":[]},{"level":3,"title":"xss 和 csrf 的概念和防御方式","slug":"xss-和-csrf-的概念和防御方式","link":"#xss-和-csrf-的概念和防御方式","children":[]},{"level":3,"title":"tcp 三次握手和四次挥手的步骤","slug":"tcp-三次握手和四次挥手的步骤","link":"#tcp-三次握手和四次挥手的步骤","children":[]},{"level":3,"title":"长列表的优化方案","slug":"长列表的优化方案","link":"#长列表的优化方案","children":[]},{"level":3,"title":"使用 hash 路由时，怎么能再刷新后时候自动滚动到页面上次的锚点位置？","slug":"使用-hash-路由时-怎么能再刷新后时候自动滚动到页面上次的锚点位置","link":"#使用-hash-路由时-怎么能再刷新后时候自动滚动到页面上次的锚点位置","children":[]},{"level":3,"title":"使用 hash 路由时，和 a 标签的锚点相冲突，怎么解决？","slug":"使用-hash-路由时-和-a-标签的锚点相冲突-怎么解决","link":"#使用-hash-路由时-和-a-标签的锚点相冲突-怎么解决","children":[]},{"level":3,"title":"前端怎样对用户的数据进行加密传输","slug":"前端怎样对用户的数据进行加密传输","link":"#前端怎样对用户的数据进行加密传输","children":[]},{"level":3,"title":"基于 md5 提升安全性","slug":"基于-md5-提升安全性","link":"#基于-md5-提升安全性","children":[]}]}],"relativePath":"interview/面试题目-02.md","lastUpdated":1677228319000}'),t={name:"interview/面试题目-02.md"},p=a(`<h1 id="面试题目-02" tabindex="-1">面试题目-02 <a class="header-anchor" href="#面试题目-02" aria-hidden="true">#</a></h1><p><a href="https://juejin.cn/post/7013953652578582558" target="_blank" rel="noreferrer">前端两年经验，历时一个月的面经和总结</a></p><h2 id="es6" tabindex="-1">es6 <a class="header-anchor" href="#es6" aria-hidden="true">#</a></h2><ul><li><a href="http://www.alloyteam.com/2016/03/es6-front-end-developers-will-have-to-know-the-top-ten-properties/" target="_blank" rel="noreferrer">前端开发者不得不知的 ES6 十大特性</a></li></ul><h3 id="map-和-set-的区别" tabindex="-1">Map 和 Set 的区别 <a class="header-anchor" href="#map-和-set-的区别" aria-hidden="true">#</a></h3><p>Map:</p><ul><li>类似对象，但是 key 除了可以是 string | number，还可以是对象</li><li>唯一性，一个 key 只能对应一个 value，如果重复添加，后面加进去的会把前面的覆盖掉</li><li>Map 的键是不能修改，但是键对应的值是可以修改的</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">小如</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> map </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">111</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>Set：</p><ul><li>类似数组</li><li>唯一性，Set 不允许出现重复数据</li><li>不能通过迭代器来改变 Set 的值，因为 Set 的值就是键</li></ul><h3 id="说一下-weekmap-和-weekset" tabindex="-1">说一下 weekMap 和 weekSet <a class="header-anchor" href="#说一下-weekmap-和-weekset" aria-hidden="true">#</a></h3><p>垃圾回收机制： <code>如果一个对象没有被引用，则会被视为垃圾并回收该对象的内存空间</code></p><p>先看个 Set 的使用案例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> set </span><span style="color:#89DDFF;">=new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">()；</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 对象是引用数据类型，key 实际上只是一个指向 {} 内存空间的指针</span></span>
<span class="line"><span style="color:#A6ACCD;">set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(key)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(set</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">size) </span><span style="color:#676E95;font-style:italic;">//1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//移除原始引用</span></span>
<span class="line"><span style="color:#A6ACCD;">key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 设置为 null 实际上只是销毁了指针，内存空间还在</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(set</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">size) </span><span style="color:#676E95;font-style:italic;">//1</span></span>
<span class="line"><span style="color:#A6ACCD;">key </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">set][</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// 取回原始引用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 所以，这种情况下 set 永远不会被垃圾回收，而 weakSet 就是为了解决这种情况而出现的</span></span>
<span class="line"></span></code></pre></div><p>weekSet</p><p><code>weekSet弱引用Set集合，WeakSet 只存储对象的弱引用，垃圾回收机制不考虑 WeakSet 对该对象的引用，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存</code></p><ul><li>它的成员只能是对象类型</li><li>不可遍历</li><li>只支持 add / delete / has 3 种基本操作</li></ul><p>WeakMap</p><p><code>WeakMap中存储的是键值对，WeaMap对键名是弱引用的，键值是正常引用，如果键在其他地方不被引用时，垃圾回收机制就会自动回收这个对象所占用的内存空间，同时移除WeakMap中的键值对，但键名对应的值如果是一个对象，则保存的是对象的强引用，不会触发垃圾回收机制被回收。</code></p><ul><li>WeaMap 对键名是弱引用的，键值是正常引用</li><li>不可遍历</li><li>只有 get / set/ delete / has 4 种基本操作</li></ul><h3 id="箭头函数和普通函数的区别" tabindex="-1">箭头函数和普通函数的区别 <a class="header-anchor" href="#箭头函数和普通函数的区别" aria-hidden="true">#</a></h3><ul><li><a href="https://segmentfault.com/a/1190000021380336" target="_blank" rel="noreferrer">箭头函数和普通函数的区别</a></li></ul><p>箭头函数</p>`,23),o=s("ul",null,[s("li",null,"没有自己的 prototype， 即没有自己的 this，它的 this 指向调用该函数时的上下文"),s("li",null,"不能作为构造函数使用"),s("li",{"css-module":"."},"没有自己的 arguments， 如果要接受多个不确定数量的参数，可以用结构的方式 (...args) =>"),s("li",null,"箭头函数不能用作 Generator 函数，不能使用 yield 关键字")],-1),r=a(`<h3 id="分别介绍一下原型、原型链、作用域和作用域链的含义和使用场景" tabindex="-1">分别介绍一下原型、原型链、作用域和作用域链的含义和使用场景 <a class="header-anchor" href="#分别介绍一下原型、原型链、作用域和作用域链的含义和使用场景" aria-hidden="true">#</a></h3><h2 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-hidden="true">#</a></h2><h3 id="visibility、display、opacity-的区别" tabindex="-1">visibility、display、opacity 的区别 <a class="header-anchor" href="#visibility、display、opacity-的区别" aria-hidden="true">#</a></h3><ul><li>display: none 脱离文档流， 绑定的事件不会触发，子元素也会消失</li><li>opacity： 0 元素（包括子元素）透明度为 0，元素看不见，当还是处于文档流之中，绑定的事件可以触发</li><li>visibility： hidden 元素不可见，绑定的事件不会触发，子元素设置 visibility: visible 后可见</li></ul><h3 id="transition、transform、translate-的区别" tabindex="-1">transition、transform、translate 的区别 <a class="header-anchor" href="#transition、transform、translate-的区别" aria-hidden="true">#</a></h3><ul><li>transform: 对给定的元素旋转，缩放，平移或扭曲，通过修改元素的坐标空间实现 <ul><li>rotate ： 旋转</li><li>scale ： 缩放</li><li>skew ： 倾斜</li><li>translate ： 平移</li><li>matrix</li></ul></li><li>transition： 让元素的变化以动画的形式呈现 <ul><li>property ： 指定属性用于生成过渡动画，如宽、高、颜色等等</li><li>duration ： 过度时间</li><li>timing-function <ul><li>linear</li><li>ease</li><li>ease-in</li><li>ease-out</li><li>ease-in-out</li></ul></li><li>delay : 延迟时间</li></ul></li></ul><h3 id="如何画一条-0-5px-的边框" tabindex="-1">如何画一条 0.5px 的边框 <a class="header-anchor" href="#如何画一条-0-5px-的边框" aria-hidden="true">#</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">border-bottom</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1px</span><span style="color:#A6ACCD;"> solid </span><span style="color:#89DDFF;">#</span><span style="color:#A6ACCD;">000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">transform</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scale</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0.5</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="parent-元素宽高不定-实现-scale-固定宽高比始终为-4-3" tabindex="-1">parent 元素宽高不定，实现 scale 固定宽高比始终为 4：3 <a class="header-anchor" href="#parent-元素宽高不定-实现-scale-固定宽高比始终为-4-3" aria-hidden="true">#</a></h3><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100vw</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">75vw</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* or */</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100vh</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">75vh</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="css-垂直居中的方案" tabindex="-1">CSS 垂直居中的方案 <a class="header-anchor" href="#css-垂直居中的方案" aria-hidden="true">#</a></h3><blockquote><p>注意： 没有说水平居中哦</p></blockquote><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">parent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">child</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><ul><li>flex</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">parent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> flex</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">align-items</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>grid</li></ul><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">parent</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> grid</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">child</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">align-self</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> center</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="伪元素和伪类的区别" tabindex="-1">伪元素和伪类的区别 <a class="header-anchor" href="#伪元素和伪类的区别" aria-hidden="true">#</a></h3><ul><li>伪类： 是添加到选择器的关键字，<code>用于指定所选元素的特殊状态</code>，修改特殊状态下的样式。 <ul><li>:hover</li><li>:active</li><li>...</li></ul></li><li>伪元素： 是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。 <ul><li>::after</li><li>::before</li><li>::placeholder</li><li>...</li></ul></li></ul><h3 id="说一下盒模型" tabindex="-1">说一下盒模型 <a class="header-anchor" href="#说一下盒模型" aria-hidden="true">#</a></h3><ul><li>标准盒模型 <ul><li>width 指的是内容区域 content 的宽度；height 指的是内容区域 content 的高度</li><li>盒子的大小 = content + border + padding + margin</li></ul></li><li>怪异盒模型 <ul><li>width、height 指的是 content + border + padding 的宽高</li><li>盒子的大小 = content + border + padding + margin</li></ul></li></ul><h3 id="响应式布局方案" tabindex="-1">响应式布局方案 <a class="header-anchor" href="#响应式布局方案" aria-hidden="true">#</a></h3><p>响应式布局指的是同一页面在不同屏幕尺寸下有不同的布局。</p><p>媒体查询</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">@media</span><span style="color:#A6ACCD;"> screen </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">max-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">320px</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* ...... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">@media</span><span style="color:#A6ACCD;"> screen </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">min-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024px</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">and</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">max-width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1440px</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* ...... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="css-layer-是什么" tabindex="-1">css @layer 是什么 <a class="header-anchor" href="#css-layer-是什么" aria-hidden="true">#</a></h3><ul><li><a href="https://juejin.cn/post/7077758893442465806" target="_blank" rel="noreferrer">2022 年最受瞩目的新特性 CSS @layer 到底是个啥？</a></li></ul><p>@layer声明了一个 级联层， 同一层内的规则将级联在一起， 这给予了开发者对层叠机制的更多控制。</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">@layer</span><span style="color:#A6ACCD;"> utilities </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/* 创建一个名为 utilities 的级联层 */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="框架" tabindex="-1">框架 <a class="header-anchor" href="#框架" aria-hidden="true">#</a></h2><h3 id="react-router、vue-router-原理" tabindex="-1">React-router、vue-router 原理 <a class="header-anchor" href="#react-router、vue-router-原理" aria-hidden="true">#</a></h3><ul><li>hash</li></ul><p>由于hash发生变化的url都会被浏览器记录下来，使得浏览器的前进后退都可以使用了，尽管浏览器没有亲求服务器，但是页面状态和url关联起来</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onhashChange</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hash</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">location</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hash</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>history</li></ul><p>history 的存储历史记录是 <code>队列存储</code> 的，也可以理解为一个数组</p><p>history 的 go / forward / back 方法都会触发 popState， 但是 pushState 和 replaceState 这两个方法也可以修改页面，但不会触发 popState 方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">popState</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 重写 history 的 pushState 和 replaceState 这俩个方法</span></span>
<span class="line"><span style="color:#A6ACCD;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pushState</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">history</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replaceState</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="react-router-的-link-标签和-html-的-a-标签有什么区别" tabindex="-1">react router 的 Link 标签和 html 的 a 标签有什么区别 <a class="header-anchor" href="#react-router-的-link-标签和-html-的-a-标签有什么区别" aria-hidden="true">#</a></h3><p>区别 a 标签默认的页面跳转，router 的”跳转”行为只会触发相匹配的对应的页面内容更新，而不会刷新整个页面</p><h3 id="vue-和-react-的区别" tabindex="-1">vue 和 react 的区别 <a class="header-anchor" href="#vue-和-react-的区别" aria-hidden="true">#</a></h3><ul><li><a href="https://juejin.cn/post/6844903974437388295" target="_blank" rel="noreferrer">前端框架用 vue 还是 react？清晰对比两者差异</a></li></ul><h3 id="说一下-css-module-以及它的原理" tabindex="-1">说一下 css module，以及它的原理 <a class="header-anchor" href="#说一下-css-module-以及它的原理" aria-hidden="true">#</a></h3><p>编译阶段加上 hash</p><h3 id="react-diff-算法和-vue-diff-算法的区别" tabindex="-1">react diff 算法和 vue diff 算法的区别 <a class="header-anchor" href="#react-diff-算法和-vue-diff-算法的区别" aria-hidden="true">#</a></h3><h3 id="spa-单页面应用和多页面应用有什么区别" tabindex="-1">SPA 单页面应用和多页面应用有什么区别 <a class="header-anchor" href="#spa-单页面应用和多页面应用有什么区别" aria-hidden="true">#</a></h3><h2 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-hidden="true">#</a></h2><h3 id="vue-中-watch-能监听-computed-的属性吗" tabindex="-1">vue 中 watch 能监听 computed 的属性吗 <a class="header-anchor" href="#vue-中-watch-能监听-computed-的属性吗" aria-hidden="true">#</a></h3><p>可以</p><h3 id="如何解决-vue-初始化页面闪动问题" tabindex="-1">如何解决 vue 初始化页面闪动问题 <a class="header-anchor" href="#如何解决-vue-初始化页面闪动问题" aria-hidden="true">#</a></h3><ul><li><a href="https://blog.csdn.net/vampire10086/article/details/109161652" target="_blank" rel="noreferrer">vue 初始化页面闪动问题</a></li></ul><p>骨架屏</p><p>Suspence / defineAsyncComponent</p><h3 id="说下-nexttick" tabindex="-1">说下 nextTick <a class="header-anchor" href="#说下-nexttick" aria-hidden="true">#</a></h3><ul><li>为什么要有 nextTick？</li></ul><p>因为 vue 采用的异步更新策略，当监听到数据发生变化的时候不会立即去更新DOM， 而是开启一个任务队列，并缓存在同一事件循环中发生的所有数据变更; 这种做法带来的好处就是可以将多次数据更新合并成一次，减少操作DOM的次数， 但是这样就会出现无法获取到实时的 dom 节点</p><p>nextTick 就是为了解决这个问题才有的</p><h3 id="vue2-template-里为什么不能使用多个头结点" tabindex="-1">vue2 template 里为什么不能使用多个头结点？ <a class="header-anchor" href="#vue2-template-里为什么不能使用多个头结点" aria-hidden="true">#</a></h3><h3 id="vue3-的-template-为什么可以多根节点" tabindex="-1">vue3 的 template 为什么可以多根节点？ <a class="header-anchor" href="#vue3-的-template-为什么可以多根节点" aria-hidden="true">#</a></h3><h3 id="keep-alive-的原理-使用有什么问题-如何解决" tabindex="-1">keep-alive 的原理，使用有什么问题？如何解决 <a class="header-anchor" href="#keep-alive-的原理-使用有什么问题-如何解决" aria-hidden="true">#</a></h3><ul><li><a href="https://juejin.cn/post/6844903837770203144" target="_blank" rel="noreferrer">彻底揭秘 keep-alive 原理</a></li></ul><h2 id="react" tabindex="-1">react <a class="header-anchor" href="#react" aria-hidden="true">#</a></h2><h3 id="setstate-是同步还是异步的" tabindex="-1">setState 是同步还是异步的 <a class="header-anchor" href="#setstate-是同步还是异步的" aria-hidden="true">#</a></h3><h3 id="简述一下-fiber-的实现原理" tabindex="-1">简述一下 fiber 的实现原理 <a class="header-anchor" href="#简述一下-fiber-的实现原理" aria-hidden="true">#</a></h3><h3 id="fiber-的时间调度通过哪两个原生-api-实现的" tabindex="-1">fiber 的时间调度通过哪两个原生 api 实现的 <a class="header-anchor" href="#fiber-的时间调度通过哪两个原生-api-实现的" aria-hidden="true">#</a></h3><ul><li>requestAnimationFrame ？</li><li>requestIdleCallback ？</li></ul><h3 id="说下-react-合成事件-以及它是如何实现的" tabindex="-1">说下 React 合成事件，以及它是如何实现的 <a class="header-anchor" href="#说下-react-合成事件-以及它是如何实现的" aria-hidden="true">#</a></h3><h3 id="useeffect-的使用方法" tabindex="-1">useEffect 的使用方法？ <a class="header-anchor" href="#useeffect-的使用方法" aria-hidden="true">#</a></h3><p>useEffect 的 return 会在什么时候执行？</p><p>useEffect 原理是什么</p><h3 id="usememo-和-usecallback-的区别-它们的实现原理是什么" tabindex="-1">useMemo 和 useCallback 的区别，它们的实现原理是什么？ <a class="header-anchor" href="#usememo-和-usecallback-的区别-它们的实现原理是什么" aria-hidden="true">#</a></h3><h3 id="useeffect、usememo、usecallback-是如何做依赖收集的" tabindex="-1">useEffect、useMemo、useCallback 是如何做依赖收集的 <a class="header-anchor" href="#useeffect、usememo、usecallback-是如何做依赖收集的" aria-hidden="true">#</a></h3><h3 id="context-的实现原理是什么-如何做依赖收集" tabindex="-1">context 的实现原理是什么？如何做依赖收集？ <a class="header-anchor" href="#context-的实现原理是什么-如何做依赖收集" aria-hidden="true">#</a></h3><h3 id="purecomponent-和-component-的区别" tabindex="-1">PureComponent 和 Component 的区别 <a class="header-anchor" href="#purecomponent-和-component-的区别" aria-hidden="true">#</a></h3><h3 id="react-dom-绑定事件和原生事件有什么区别" tabindex="-1">React dom 绑定事件和原生事件有什么区别 <a class="header-anchor" href="#react-dom-绑定事件和原生事件有什么区别" aria-hidden="true">#</a></h3><h3 id="说一下对-tree-shaking-的了解-对-commonjs-和-esm-都可以用-tree-shaking-吗" tabindex="-1">说一下对 tree-shaking 的了解，对 CommonJS 和 ESM 都可以用 tree-shaking 吗 <a class="header-anchor" href="#说一下对-tree-shaking-的了解-对-commonjs-和-esm-都可以用-tree-shaking-吗" aria-hidden="true">#</a></h3><h3 id="css-loader-的作用是什么-不使用-css-loader-行不行" tabindex="-1">css-loader 的作用是什么？不使用 css-loader 行不行 <a class="header-anchor" href="#css-loader-的作用是什么-不使用-css-loader-行不行" aria-hidden="true">#</a></h3><h3 id="webpack-中-plugin-和-laoder-的区别-它们的执行时机-以及常用的-plugin-和-loader" tabindex="-1">webpack 中 plugin 和 laoder 的区别，它们的执行时机，以及常用的 plugin 和 loader <a class="header-anchor" href="#webpack-中-plugin-和-laoder-的区别-它们的执行时机-以及常用的-plugin-和-loader" aria-hidden="true">#</a></h3><h2 id="浏览器-网络协议" tabindex="-1">浏览器/网络协议 <a class="header-anchor" href="#浏览器-网络协议" aria-hidden="true">#</a></h2><h3 id="介绍一下-http-缓存" tabindex="-1">介绍一下 http 缓存 <a class="header-anchor" href="#介绍一下-http-缓存" aria-hidden="true">#</a></h3><ul><li><p>强缓存/协商缓存的字端</p><ul><li>强缓存相关字段有 <code>expires，cache-control</code>。</li><li>协商缓存相关字段有 <code>Last-Modified/If-Modified-Since，Etag/If-None-Match</code></li></ul></li><li><p>cache-control、expires、etag 等字段的属性值是什么样的？</p><p>如果 cache-control 与 expires 同时存在的话，<code>cache-control 的优先级高于 expires</code>。</p></li><li><p>这些字段都被存放在请求的哪个部分？</p><p>header ?</p></li><li><p>last-modify 和 expires 这些字段的时间有什么区别？能否共存</p></li><li><p>cache-control 中的 no-cache 和 no-store 的区别</p></li></ul><h3 id="说下-requestanimationframe" tabindex="-1">说下 requestAnimationFrame <a class="header-anchor" href="#说下-requestanimationframe" aria-hidden="true">#</a></h3><h3 id="script-标签为什么要放在底部" tabindex="-1">script 标签为什么要放在底部 <a class="header-anchor" href="#script-标签为什么要放在底部" aria-hidden="true">#</a></h3><h3 id="defer-和-async-的区别-以及它们的加载和执行时机" tabindex="-1">defer 和 async 的区别，以及它们的加载和执行时机 <a class="header-anchor" href="#defer-和-async-的区别-以及它们的加载和执行时机" aria-hidden="true">#</a></h3><h3 id="dom-事件模型。" tabindex="-1">DOM 事件模型。 <a class="header-anchor" href="#dom-事件模型。" aria-hidden="true">#</a></h3><p>事件捕获和事件冒泡的使用场景</p><h3 id="从输入-url-到页面展示的过程" tabindex="-1">从输入 url 到页面展示的过程 <a class="header-anchor" href="#从输入-url-到页面展示的过程" aria-hidden="true">#</a></h3><ul><li><p>步骤</p><ul><li>DNS 解析</li><li>TCP 连接</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回 HTTP 报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ul></li><li><p>详解</p><p>这是一个必考的面试问题， 输入 url 后，首先需要找到这个 url 域名的服务器 ip, 为了寻找这个 ip，浏览器首先会寻找缓存，查看缓存中是否有记录，</p><p>缓存的查找记录为：<code>浏览器缓存-》系统缓存-》路由器缓存</code>，</p><p>缓存中没有则查找系统的 hosts 文件中是否有记录，如果没有则查询 DNS 服务器，得到服务器的 ip 地址后，浏览器根据这个 ip 以及相应的端口号，</p><p>构造一个 http 请求，这个请求报文会包括这次请求的信息，主要是请求方法，请求说明和请求附带的数据，并将这个 http 请求封装在一个 tcp 包中，这个 tcp 包会依次经过<code>传输层，网络层，数据链路层，物理层</code>到达服务器，服务器解析这个请求来作出响应，返回相应的 html 给浏览器.</p><p>因为 html 是一个树形结构，浏览器根据这个 html 来构建<code>DOM 树，在dom树的构建过程中如果遇到JS 脚本和外部JS 连接，则会停止构建DOM 树来执行和下载相应的代码，这会造成阻塞</code>，这就是为什么推荐 JS 代码应该放在 html 代码的后面，</p><p>之后根据外部映射，内部映射，内联样式构建一个 CSS 对象模型树<code>CSSOM 树</code>，</p><p>构建完成后和 DOM 树合并为渲染树，这里主要做的是<code>排除非视觉节点</code>，比如 script，meta 标签和排除 display 为 none 的节点，</p><p>之后进行布局，<code>布局主要是确定各个元素的位置和尺寸</code>，</p><p>之后是渲染页面，因为 html 文件中会含有图片，视频，音频等资源，在解析 DOM 的过程中，遇到这些都会进行并行下载，浏览器对每个域的并行下载数量有一定的限制，一般是 4-6 个，当然在这些所有的请求中我们还需要关注的就是缓存，缓存一般通过 Cache-Control、Last-Modify、Expires 等首部字段控制。</p><p>Cache-Control 和 Expires 的区别在于 <code>Cache-Control 使用相对时间，Expires 使用的是基于服务器端的绝对时间</code>，因为存在时差问题，一般采用 Cache-Control，</p><p>在请求这些有设置了缓存的数据时，会先查看是否过期，如果没有过期则直接使用本地缓存，过期则请求并在服务器校验文件是否修改，</p><p>如果上一次响应设置了 ETag 值会在这次请求的时候作为 If-None-Match 的值交给服务器校验，如果一致，继续校验 Last-Modified，没有设置 ETag 则直接验证 Last-Modified，再决定是否返回 304。</p></li></ul><h3 id="xss-和-csrf-的概念和防御方式" tabindex="-1">xss 和 csrf 的概念和防御方式 <a class="header-anchor" href="#xss-和-csrf-的概念和防御方式" aria-hidden="true">#</a></h3><ul><li><p><code>CSRF</code>：<code>跨站请求伪造</code>，可以理解为攻击者盗用了用户的身份，以用户的名义发送了恶意请求.</p><p>比如用户登录了一个网站后，立刻在另一个ｔａｂ页面访问量攻击者用来制造攻击的网站，这个网站要求访问刚刚登陆的网站，并发送了一个恶意请求，这时候 CSRF 就产生了，比如这个制造攻击的网站使用一张图片，但是这种图片的链接却是可以修改数据库的，这时候攻击者就可以以用户的名义操作这个数据库</p><p>防御方式的话：使用验证码，检查 https 头部的 refer，使用 token。</p></li><li><p><code>XSS</code>：<code>跨站脚本攻击</code>，是说攻击者通过注入恶意的脚本，在用户浏览网页的时候进行攻击，</p><p>比如获取 cookie，或者其他用户身份信息，可以分为存储型和反型，存储型是攻击者输入一些数据并且存储到了数据库中，其他浏览者看到的时候进行攻击，反射型的话不存储在数据库中，往往表现为将攻击代码放在 url 地址的请求参数中</p><p>防御的话为 cookie 设置 httpOnly 属性，对用户的输入进行检查，进行特殊字符过滤。</p></li></ul><h3 id="tcp-三次握手和四次挥手的步骤" tabindex="-1">tcp 三次握手和四次挥手的步骤 <a class="header-anchor" href="#tcp-三次握手和四次挥手的步骤" aria-hidden="true">#</a></h3><ul><li><a href="https://zhuanlan.zhihu.com/p/40013850" target="_blank" rel="noreferrer">TCP 三次握手四次挥手详解</a></li></ul><h3 id="长列表的优化方案" tabindex="-1">长列表的优化方案 <a class="header-anchor" href="#长列表的优化方案" aria-hidden="true">#</a></h3><h3 id="使用-hash-路由时-怎么能再刷新后时候自动滚动到页面上次的锚点位置" tabindex="-1">使用 hash 路由时，怎么能再刷新后时候自动滚动到页面上次的锚点位置？ <a class="header-anchor" href="#使用-hash-路由时-怎么能再刷新后时候自动滚动到页面上次的锚点位置" aria-hidden="true">#</a></h3><h3 id="使用-hash-路由时-和-a-标签的锚点相冲突-怎么解决" tabindex="-1">使用 hash 路由时，和 a 标签的锚点相冲突，怎么解决？ <a class="header-anchor" href="#使用-hash-路由时-和-a-标签的锚点相冲突-怎么解决" aria-hidden="true">#</a></h3><h3 id="前端怎样对用户的数据进行加密传输" tabindex="-1">前端怎样对用户的数据进行加密传输 <a class="header-anchor" href="#前端怎样对用户的数据进行加密传输" aria-hidden="true">#</a></h3><h3 id="基于-md5-提升安全性" tabindex="-1">基于 md5 提升安全性 <a class="header-anchor" href="#基于-md5-提升安全性" aria-hidden="true">#</a></h3>`,97),i=[p,o,r];function c(d,h,y,u,D,C){return n(),l("div",null,i)}const f=e(t,[["render",c]]);export{A as __pageData,f as default};
