import{_ as s,c as n,o as l,e as a}from"./app.9e805d43.js";const A=JSON.parse('{"title":"爪哇教育大厂模拟面试 - 2022-09-20","description":"","frontmatter":{"title":"爪哇教育大厂模拟面试 - 2022-09-20","desc":"以下记录取自 bilibili 爪哇教育大厂模拟面试"},"headers":[{"level":2,"title":"FP、FCP、FMP、LCP 是都啥？有什么用？怎么用？","slug":"fp、fcp、fmp、lcp-是都啥-有什么用-怎么用","link":"#fp、fcp、fmp、lcp-是都啥-有什么用-怎么用","children":[]},{"level":2,"title":"performance.timing","slug":"performance-timing","link":"#performance-timing","children":[]},{"level":2,"title":"module、chunk、bundle 的概念?","slug":"module、chunk、bundle-的概念","link":"#module、chunk、bundle-的概念","children":[]},{"level":2,"title":"优化方法","slug":"优化方法","link":"#优化方法","children":[]},{"level":2,"title":"vuex","slug":"vuex","link":"#vuex","children":[]},{"level":2,"title":"$nextTick","slug":"nexttick","link":"#nexttick","children":[]},{"level":2,"title":"vue-router","slug":"vue-router","link":"#vue-router","children":[]},{"level":2,"title":"deps: (依赖)","slug":"deps-依赖","link":"#deps-依赖","children":[]},{"level":2,"title":"第三方包打包后一般有几种格式？","slug":"第三方包打包后一般有几种格式","link":"#第三方包打包后一般有几种格式","children":[]},{"level":2,"title":"npm 包入口的区别","slug":"npm-包入口的区别","link":"#npm-包入口的区别","children":[]},{"level":2,"title":"手写 promise.race","slug":"手写-promise-race","link":"#手写-promise-race","children":[]}],"relativePath":"interview/爪哇教育-模拟面试-01.md","lastUpdated":1675774867000}'),p={name:"interview/爪哇教育-模拟面试-01.md"},o=a(`<h1 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-hidden="true">#</a></h1><h2 id="fp、fcp、fmp、lcp-是都啥-有什么用-怎么用" tabindex="-1">FP、FCP、FMP、LCP 是都啥？有什么用？怎么用？ <a class="header-anchor" href="#fp、fcp、fmp、lcp-是都啥-有什么用-怎么用" aria-hidden="true">#</a></h2><p><a href="https://zhuanlan.zhihu.com/p/495649475" target="_blank" rel="noreferrer">知乎 - FP、FCP、FMP、LCP 都是什么 P？</a></p><ul><li><p><code>load（Onload Event）</code>，它代表页面中依赖的所有资源加载完的事件。</p><blockquote><p>Onload Event 代表页面中依赖的所有资源：DOM、图片、CSS、Flash 等都加载完，window.onload 注册的回调就会在 load 事件触发时候被调用</p></blockquote></li><li><p><code>DCL（DOMContentLoaded）</code>，DOM 解析完毕。</p><blockquote><p>DOMContentLoaded 事件，当 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，无需等待样式表、图像和子框架的完成加载, DCL 在 load 之前</p></blockquote></li><li><p><code>FP（First Paint）</code>，表示渲染出第一个像素点。FP 一般在 HTML 解析完成或者解析一部分时候触发。</p><blockquote><p>白屏时间 = 地址栏输入网址后回车 - 浏览器出现第一个元素 = FP 事件触发时间</p></blockquote></li><li><p><code>FCP（First Contentful Paint）</code>，表示渲染出第一个内容，这里的“内容”可以是文本、图片、canvas, 有时候 FCP 比 Onload Event 先触发，因为渲染第一个内容时候可能不包括图片的展示，只有文本内容。</p><blockquote><p>首屏时间 = 地址栏输入网址后回车 - 浏览器第一屏渲染完成 = FCP 事件触发时间</p></blockquote></li><li><p><code>FMP（First Meaningful Paint）</code>，首次渲染有意义的内容的时间，“有意义”没有一个标准的定义，FMP 的计算方法也很复杂。</p></li><li><p><code>LCP（largest contentful Paint）</code>，最大内容渲染时间</p></li></ul><h2 id="performance-timing" tabindex="-1">performance.timing <a class="header-anchor" href="#performance-timing" aria-hidden="true">#</a></h2><p><a href="https://juejin.cn/post/6973567030528065573" target="_blank" rel="noreferrer">掘金 - 使用 Performance API 获取页面性能</a></p><p><a href="https://juejin.cn/post/6844903725648068615" target="_blank" rel="noreferrer">掘金 - 前端小技巧(2)-performance.timing 属性介绍</a></p><p>概念： <code>Performance</code> 是一个浏览器全局对象，提供了一组 API 用于编程式地获取程序在某些节点的<code>性能数据</code>。它包含一组高精度时间定义，以及配套的相关方法</p><p><code>window.performance.timing</code>: 提供了在页面加载和使用时的<code>各种性能计时信息</code></p><p>如何计算白屏渲染时间？</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">performance) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pf</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">performance</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pfEntries</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getEntriesByType</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">paint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pfEntries</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">first-paint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">白屏渲染时间: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fp</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">startTime</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>如何计算首屏渲染时间？</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">performance) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pf</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">performance</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pfEntries</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pf</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getEntriesByType</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">paint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pfEntries</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">each</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">each</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">first-contentful-paint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">首屏渲染时间: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fp</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">startTime</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li><p>getEntires() - Observer</p><p><code>Performance.getEntries</code>, 同第二点，属于 <code>Performance</code> api 中的一个属性</p></li></ul><h2 id="module、chunk、bundle-的概念" tabindex="-1">module、chunk、bundle 的概念? <a class="header-anchor" href="#module、chunk、bundle-的概念" aria-hidden="true">#</a></h2><ul><li>module: 可以理解为我们写的代码，webpack 把我们项目中的每一个文件当做一个模块进行处理</li><li>chunk： webpack <code>打包过程</code>的产物</li><li>bundle: webpack 最终输出的东西，可以直接在浏览器运行的代码，如 js、html、css、img、svg 等</li></ul><ol><li><p>bundle 的 hash、chunkhash、contenthash 这几个属性是啥 ？</p><ul><li>hash： 所有的 bundle 使用同一个 hash 值，跟每一次 webpack 打包的过程有关</li><li>chunkhash： 打包过程中生成的 hash 值</li><li>contenthash： 根据文件的内容生成的 hash</li></ul></li></ol><blockquote><p>在热更新模式下，会导致 chunkhash 和 contenthash 计算错误, 因此热更新下(开发模式)只能使用 hash 模式。在生产环境中我们一般使用 contenthash 或者 chunkhash</p></blockquote><h2 id="优化方法" tabindex="-1">优化方法 <a class="header-anchor" href="#优化方法" aria-hidden="true">#</a></h2><p><a href="https://zhuanlan.zhihu.com/p/100459699" target="_blank" rel="noreferrer">知乎 - 由浅至深了解 webpack 异步加载背后的原理</a></p><p><a href="https://juejin.cn/post/7031115698633965582" target="_blank" rel="noreferrer">掘金 - webpack 完全指南：代码压缩</a></p><p>5-1. 按需加载（异步加载 / 分包加载）</p><ul><li><p>webpack --&gt; code spliting</p><ul><li>更好的利用浏览器缓存: 例如修改了一个文件，对应打包文件的 hash 值也就变了，浏览器回去重新回获取新的资源，由于使用了 <code>异步加载（分包加载）</code>，浏览器会单独重新加载对应的包，而不会去重新获取整个项目的包</li><li>更快的加载速度: 使用异步加载，减少了首次渲染需要获取的资源大小</li></ul></li><li><p>vue-router 组件动态引入原理：</p><ul><li>webpackJsonpCallback</li><li>promise.all</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//正常加载</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../pages/index.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../pages/view.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//懒加载</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../pages/index.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> resolve)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../pages/view.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> resolve)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//懒加载 - 按组</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> require</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ensure</span><span style="color:#A6ACCD;">([]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">r</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../pages/index.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">group-index</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">r</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> require</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ensure</span><span style="color:#A6ACCD;">([]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">r</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../pages/view.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">group-view</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 懒加载 - 按组 import，基于ES6 import的特性</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> index </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../pages/index.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> view </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../pages/view.vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li></ul><p>5-2. js 压缩</p><pre><code>webpack v4 之后的版本默认集成了这个功能，生成模式下默认打包后的代码就是压缩之后的
</code></pre><p>5-3. css 提取： 使用 <code>mini-css-extract-plugin</code>， hash 模式使用 contenthash</p><p>5-4. tree shaking</p><ul><li><p>例如组件库如何实现按需加载</p><ul><li>webpack : babel-plugin-import</li><li>vite : unplugin-vue-components</li></ul></li><li><p>side effect 是啥？有啥作用</p><p>sideEffects 是 webpack v4 之后版本才有的功能，作用是移除一些确定没有副作用的代码片段，更好的实现 tree-shaking</p><p>sideEffects 就是为 tree shaking 服务的, 具体用法的特性看这篇文章 <a href="https://juejin.cn/post/7096307096836112398" target="_blank" rel="noreferrer">掘金 - 我理解的 sideEffects</a></p></li><li><p>tree-shaking 原理</p><p>Tree Shaking 指基于 ES Module 进行静态分析，通过 AST 将用不到的函数进行移除，从而减小打包体积</p></li></ul><h1 id="vue-相关" tabindex="-1">vue 相关 <a class="header-anchor" href="#vue-相关" aria-hidden="true">#</a></h1><h2 id="vuex" tabindex="-1">vuex <a class="header-anchor" href="#vuex" aria-hidden="true">#</a></h2><ul><li><p>有哪些 api ： state、getter、mutation、action、modules</p></li><li><p>mutation / action 区别</p><table><thead><tr><th>name</th><th>调用方式</th><th>特点</th></tr></thead><tbody><tr><td>mutation</td><td>commit</td><td>同步， 唯一修改 state 的方式</td></tr><tr><td>action</td><td>dispatch</td><td>异步， 不能直接变更 state， 通过提交相应的 mutation 修改 state</td></tr></tbody></table></li><li><p>刷新页面后 vuex 的 state 的值不丢失的方法(数据持久化)</p><ul><li><code>localStorage</code> 保存、修改到 vuex 的 state 时，把数据保存到 localStorage 中</li><li><code>vuex-presistedState</code> vuex 插件，利用插件，自动帮我们实现保存到 localStorage 或 sessionStore, 刷新时自动给获取出来</li><li><code>vuex-persist</code> vuex 插件， 保存到 cookie 或 localStorage</li></ul></li></ul><h2 id="nexttick" tabindex="-1">$nextTick <a class="header-anchor" href="#nexttick" aria-hidden="true">#</a></h2><p><a href="https://juejin.cn/post/7089980191329484830" target="_blank" rel="noreferrer">掘金 - Vue 异步更新机制以及$nextTick 原理</a></p><ul><li><p>微任务 / 宏任务</p><ul><li><p>js 任务</p><ul><li><p>同步任务</p></li><li><p>异步任务</p><ul><li>宏任务： <code>script（整体代码）、setTimeout、setInterval、setImmediate、I/O、UI rendering</code></li><li>微任务： <code>promise.then、MutationObserver</code></li></ul></li></ul></li></ul><blockquote><p>总的来说，在事件循环中，微任务会先于宏任务执行。</p><p>而在微任务执行完后会进入浏览器更新渲染阶段，所以在更新渲染前使用微任务会比宏任务快一些，一次循环就是一次 tick</p></blockquote><p><code>vue</code> 默认就是走的 <code>异步更新机制</code>，它会实现一个<code>队列</code>进行缓存当前需要更新的 <code>watcher</code>, 所以 vue 并不是跟随数据变化立即更新视图的，它是维护了一个 watcher 队列，并且 id 重复的 watcher 只会推进队列一次，因为我们关心的只是最终的数据，而不是它更新多少次。等到下一个 tick 时，这些 watcher 才会从队列中取出，更新视图。</p></li><li><p>降级</p><p>Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。</p><ul><li><p>优先使用 promise.then 优雅降级(不满足则使用下一优先级的进行尝试)</p><ul><li>promise.then</li><li>mutationObserver</li><li>setImmediate</li><li>setTimeout</li></ul></li></ul></li><li><p>为什么优先使用微任务？</p><blockquote><p>因为微任务一定比宏任务优先执行</p><p>如果 nextTick 是微任务，它会在当前同步任务执行完立即执行所有的微任务，也就是修改 DOM 的操作也会在当前 tick 内执行，等本轮 tick 任务全部执行完成，才是开始执行 UI rendering。</p><p>如果 nextTick 是宏任务，它会被推进宏任务队列，并且在本轮 tick 执行完之后的某一轮执行，注意，它并不一定是下一轮，因为你不确定宏任务队列中它之前还有所少个宏任务在等待着。所以为了能够尽快更新 DOM，Vue 中优先采用的是微任务</p><p>并且在 Vue3 中，它没有了兼容判断，直接使用的是 promise.then 微任务，不再考虑宏任务了。</p></blockquote></li></ul><h2 id="vue-router" tabindex="-1">vue-router <a class="header-anchor" href="#vue-router" aria-hidden="true">#</a></h2><ul><li><p>onpopstate 可以监听到那些跳转</p><ul><li>点击浏览器的 <code>前进按钮/后退按钮</code></li><li>执行 js 代码 <code>history.go(n) / history.forward() / history.back()</code></li></ul></li><li><p>路由守卫原理</p><ul><li><p>中间件</p></li><li><p>promise 链式调用</p></li><li><p>路由守卫分类</p><ul><li><p>全局路由守卫</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VueRouter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 路由模式</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">history</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 路由规则表</span></span>
<span class="line"><span style="color:#A6ACCD;">    routes</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 用全局前置守卫判断用户是否登录</span></span>
<span class="line"><span style="color:#A6ACCD;">router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">beforeEach</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">from</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 在使用导航守卫来验证用户是否登录，一定要把登录页面路由排除掉,防止死循环</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果没有在本地存储中获取到token值，并且即将跳转的页面不是登录页</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">sessionStorage</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getItem</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">token</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">to</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">path</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 到登录页面</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// next(&#39;/login&#39;)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// replace: true表示跳转到登录页面后，不允许回退</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> replace</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>路由独享守卫</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VueRouter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">routes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">beforeEnter</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">from</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div></li><li><p>组件内守卫</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//执行完全局前置守卫和路由独享守卫，就会执行当前函数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">beforeRouteEnter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">from</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 不！能！获取组件实例 \`this\`</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 因为当守卫执行前，组件实例还没被创建</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//动态路由参数改变就会触发这个函数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">beforeRouteUpdate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">from</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 在当前路由改变，但是该组件被复用时调用</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 可以访问组件实例 \`this\`</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//离开当前页面时调用</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">beforeRouteLeave</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">from</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 导航离开该组件的对应路由时调用</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 可以访问组件实例 \`this\`</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div></li></ul></li></ul></li><li><p>hash / history</p><ul><li>&#39;#&#39;</li><li>监听方式 v4 已经统一</li><li>部署时使用 history 路由的项目需要注意些什么 <ul><li>问题 <ul><li>当我们把 history 项目部署到服务器中后,此时我们在浏览器输入一个网址(比如是 <a href="http://www.test.com" target="_blank" rel="noreferrer">www.test.com</a> ), 此时会经过 dns 解析，拿到 ip 地址后根据 ip 地址向该服务器发起请求,服务器接受到请求后,然后返回相应的结果(html,css,js)。</li><li>如果我们在前端设置了重定向，此时页面会进行跳转到 <a href="http://www.test.com/home" target="_blank" rel="noreferrer">www.test.com/home</a> ,在前端会进行匹配对应的组件然后将其渲染到页面上。</li><li>此时如果我们刷新页面的话，浏览器会发送新的请求 <a href="http://www.test.com/home" target="_blank" rel="noreferrer">www.test.com/home</a>, 如果后端服务器没有 /home 对应的接口，那么就会返回 404。</li></ul></li><li>解决方法 <ul><li>生产环境 刷新 404 的解决办法可以在 nginx 做代理转发，在 nginx 中配置按顺序检查参数中的资源是否存在，如果都没有找到，让 nginx 内部重定向到项目首页。</li></ul></li><li>开发环境为什么不会有这个问题 <ul><li>开发环境中 vue-cli 中的 webpack 配置帮我们解决这个问题了</li></ul></li></ul></li></ul></li></ul><h1 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-hidden="true">#</a></h1><h2 id="deps-依赖" tabindex="-1">deps: (依赖) <a class="header-anchor" href="#deps-依赖" aria-hidden="true">#</a></h2><ul><li>dep / peer / dev / optional / bundle <ul><li><a href="https://blog.csdn.net/hujinyuan357/article/details/99621542" target="_blank" rel="noreferrer">dependencies、devDependencies、peerDependencies、optionalDependencies 区别</a></li><li><code>dependencies</code>: 应用依赖，或者叫做业务依赖, 项目发布之后需要用到的<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install packageName</span></span>
<span class="line"></span></code></pre></div></li><li><code>devDependencies</code>: 开发环境依赖，通常是单元测试或者打包工具等<div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install packageName </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">save</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dev</span></span>
<span class="line"></span></code></pre></div></li><li><code>peerDependencies</code>: 同等依赖，或者叫同伴依赖，用于指定当前包（也就是你写的包）兼容的宿主版本</li><li><code>optionalDependencies</code>: 可选依赖，如果有一些依赖包即使安装失败，项目仍然能够运行或者希望 npm 继续运行</li><li><code>bundledDependencies</code>: 打包依赖，bundledDependencies 是一个包含 依赖包名的数组对象，在发布时会将这个对象中的包打包到最终的发布包里</li></ul></li></ul><h2 id="第三方包打包后一般有几种格式" tabindex="-1">第三方包打包后一般有几种格式？ <a class="header-anchor" href="#第三方包打包后一般有几种格式" aria-hidden="true">#</a></h2><pre><code>umd cjs esm mjs
</code></pre><h2 id="npm-包入口的区别" tabindex="-1">npm 包入口的区别 <a class="header-anchor" href="#npm-包入口的区别" aria-hidden="true">#</a></h2><p><a href="https://www.cnblogs.com/qianxiaox/p/14041717.html" target="_blank" rel="noreferrer">博客园 - package.json 中你还不清楚的 browser，module，main 字段优先级</a></p><ul><li><p>bin</p></li><li><p>main</p></li><li><p>browser</p></li><li><p>module</p></li><li><p>一个 npm 打包之后的结果可以分为以下 3 个类型</p><ul><li>只允许在客户端使用的</li><li>只允许造服务端使用的</li><li>浏览器/服务端都可以使用</li></ul></li><li><p>如果我们需要开发一个 npm 包同时兼容支持 web 端 和 server 端，需要在不同环境下加载 npm 包不同的入口文件</p><ul><li><code>main</code> : 定义了 npm 包的入口文件，browser 环境和 node 环境均可使用</li><li><code>module</code> : 定义 npm 包的 ESM 规范的入口文件，browser 环境和 node 环境均可使用</li><li><code>browser</code> : 定义 npm 包在 browser 环境下的入口文件</li></ul></li><li><p>总结</p><ul><li>如果 npm 包导出的是 ESM 规范的包，使用 module</li><li>如果 npm 包只在 web 端使用，并且严禁在 server 端使用，使用 browser。</li><li>如果 npm 包只在 server 端使用，使用 main</li><li>如果 npm 包在 web 端和 server 端都允许使用，使用 browser 和 main</li></ul></li></ul><h1 id="手写题" tabindex="-1">手写题 <a class="header-anchor" href="#手写题" aria-hidden="true">#</a></h1><h2 id="手写-promise-race" tabindex="-1">手写 promise.race <a class="header-anchor" href="#手写-promise-race" aria-hidden="true">#</a></h2>`,46),e=[o];function t(c,r,i,D,y,F){return l(),n("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
