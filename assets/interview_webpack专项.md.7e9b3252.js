import{_ as s,c as a,o as l,e as n}from"./app.e2717202.js";const h=JSON.parse('{"title":"webpack 专项","description":"","frontmatter":{},"headers":[{"level":2,"title":"cjs、esm、umd 区别","slug":"cjs、esm、umd-区别","link":"#cjs、esm、umd-区别","children":[]},{"level":2,"title":"webpack 打包原理","slug":"webpack-打包原理","link":"#webpack-打包原理","children":[]},{"level":2,"title":"webpack 构建流程","slug":"webpack-构建流程","link":"#webpack-构建流程","children":[]},{"level":2,"title":"loader 是什么？常见的 loader","slug":"loader-是什么-常见的-loader","link":"#loader-是什么-常见的-loader","children":[{"level":3,"title":"loader 特性","slug":"loader-特性","link":"#loader-特性","children":[]},{"level":3,"title":"常见的 loader","slug":"常见的-loader","link":"#常见的-loader","children":[]}]},{"level":2,"title":"plugin 是什么？常见的 plugin","slug":"plugin-是什么-常见的-plugin","link":"#plugin-是什么-常见的-plugin","children":[{"level":3,"title":"常见 plugin","slug":"常见-plugin","link":"#常见-plugin","children":[]},{"level":3,"title":"loader 和 plugin 的区别","slug":"loader-和-plugin-的区别","link":"#loader-和-plugin-的区别","children":[]}]},{"level":2,"title":"sourceMap 是什么？怎么用？","slug":"sourcemap-是什么-怎么用","link":"#sourcemap-是什么-怎么用","children":[{"level":3,"title":"什么是 Sourcemap","slug":"什么是-sourcemap","link":"#什么是-sourcemap","children":[]},{"level":3,"title":"怎么使用","slug":"怎么使用","link":"#怎么使用","children":[]}]},{"level":2,"title":"webpack 的 module、chunk、bundle 又怎么区别","slug":"webpack-的-module、chunk、bundle-又怎么区别","link":"#webpack-的-module、chunk、bundle-又怎么区别","children":[]},{"level":2,"title":"webpack文件指纹中 hash、chunkhash 和 contenthash 的区别","slug":"webpack文件指纹中-hash、chunkhash-和-contenthash-的区别","link":"#webpack文件指纹中-hash、chunkhash-和-contenthash-的区别","children":[{"level":3,"title":"文件指纹是什么","slug":"文件指纹是什么","link":"#文件指纹是什么","children":[]}]},{"level":2,"title":"webpack HMR 的原理","slug":"webpack-hmr-的原理","link":"#webpack-hmr-的原理","children":[]},{"level":2,"title":"babel 的原理？常见的 babel 有哪些？","slug":"babel-的原理-常见的-babel-有哪些","link":"#babel-的原理-常见的-babel-有哪些","children":[]},{"level":2,"title":"tree-shaking 原理是什么","slug":"tree-shaking-原理是什么","link":"#tree-shaking-原理是什么","children":[{"level":3,"title":"sideEffect","slug":"sideeffect","link":"#sideeffect","children":[]}]},{"level":2,"title":"如何减小打包体积","slug":"如何减小打包体积","link":"#如何减小打包体积","children":[]},{"level":2,"title":"如何提高打包、构建速度","slug":"如何提高打包、构建速度","link":"#如何提高打包、构建速度","children":[]},{"level":2,"title":"main、module、exports 入口的区别","slug":"main、module、exports-入口的区别","link":"#main、module、exports-入口的区别","children":[]},{"level":2,"title":"webpack style-loader 和 css-loader 区别","slug":"webpack-style-loader-和-css-loader-区别","link":"#webpack-style-loader-和-css-loader-区别","children":[]},{"level":2,"title":"webpack 怎么配置 ts 打包","slug":"webpack-怎么配置-ts-打包","link":"#webpack-怎么配置-ts-打包","children":[]}],"relativePath":"interview/webpack专项.md","lastUpdated":1678354407000}'),e={name:"interview/webpack专项.md"},p=n(`<h1 id="webpack-专项" tabindex="-1">webpack 专项 <a class="header-anchor" href="#webpack-专项" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>老王 webpack 学习笔记</p></div><h2 id="cjs、esm、umd-区别" tabindex="-1">cjs、esm、umd 区别 <a class="header-anchor" href="#cjs、esm、umd-区别" aria-hidden="true">#</a></h2><ul><li>cjs <ul><li>运行在 node 环境，不能直接在浏览器环境使用</li><li>使用 module 和 exports 进行导入导出</li><li>输出的是值的拷贝 <ul><li>也就是说，一旦输出一个值，模块内部的变化就不会影响到这个值了</li></ul></li><li>运行时加载 <ul><li>输入时先加载整个模块，生成一个对象，使用时在从这个对象上读取方法</li></ul></li></ul></li><li>esm <ul><li>node 和 浏览器环境都支持</li><li>使用 export 和 import 导入导出</li><li>输出的是值的引用 <ul><li>遇到 import 时只会生成一个只读引用，只有脚本执行时，才回去加载的模块里面取值</li></ul></li><li>编译时加载 <ul><li>es 模块不是对象，使用时只加载指定的对象，不用加载整个模块</li></ul></li></ul></li></ul><blockquote><p>如何在 node 中使用 esm</p><ol><li><p>文件后缀使用 .mjs（不推荐）</p></li><li><p>package.json 设置 type 为 module (推荐)</p></li></ol></blockquote><p><img src="https://img-blog.csdnimg.cn/f5acaf7f1e574f90a98b2804a7f581a7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5LiA5p2h6IKl6bK26bG8,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt=""></p><ul><li>umd <ul><li>兼容 cjs 和 amd</li></ul></li></ul><h2 id="webpack-打包原理" tabindex="-1">webpack 打包原理 <a class="header-anchor" href="#webpack-打包原理" aria-hidden="true">#</a></h2><p>本质上,webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。</p><p>当 webpack 处理应用程序时,它会<code>递归地构建一个依赖关系图(dependency graph), 其中包含应用程序需要的每个模块, 然后将所有这些模块打包成一个或多个 bundle</code>。</p><p>webpack 就像一条生产线,要经过一系列处理流程后才能将源文件转换成输出结果。</p><p>这条生产线上的每个处理流程的职责都是单一的,多个流程之间有存在依赖关系,只有完成当前处理后才能交给下一个流程去处理。</p><p>插件就像是一个插入到生产线中的一个功能,在特定的时机对生产线上的资源做处理。</p><h2 id="webpack-构建流程" tabindex="-1">webpack 构建流程 <a class="header-anchor" href="#webpack-构建流程" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">省流</p><p>核心： module，在 webpack 中，可以认为一个文件就是一个 module</p><p>初始化参数 -&gt; 开始编译 -&gt; 确定入口 -&gt; 编译模块 -&gt; 完成模块编译 -&gt; 输出资源 -&gt; 输出完成</p></div><ol><li><code>初始化参数</code>：解析webpack配置参数，合并shell传入和webpack.config.js文件配置的参数，形成最后的配置结果。</li><li><code>开始编译</code>：上一步得到的参数初始化compiler对象，注册所有配置的插件，插件监听webpack构建生命周期的事件节点，做出相应的反应，执行对象的 run 方法开始执行编译。</li><li><code>确定入口</code>：从配置的entry入口，开始解析文件构建AST语法树，找出依赖，递归下去。</li><li><code>编译模块</code>：递归中根据文件类型和loader配置，调用所有配置的loader对文件进行转换，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</li><li><code>完成模块编译</code>：在经过第4步使⽤ Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</li><li><code>输出资源</code>：根据⼊⼝和模块之间的依赖关系，组装成⼀个个包含多个模块的 Chunk，再把每个 Chunk 转换成⼀个单独的⽂件加⼊到输出列表，这步是可以修改输出内容的最后机会；</li><li><code>输出完成</code>：在确定好输出内容后，根据配置确定输出的路径和⽂件名，把⽂件内容写⼊到⽂件系统。</li></ol><blockquote><p>rollup 、vite 都是基于 ESM, 开发阶段无需构建，浏览器直接使用</p></blockquote><h2 id="loader-是什么-常见的-loader" tabindex="-1">loader 是什么？常见的 loader <a class="header-anchor" href="#loader-是什么-常见的-loader" aria-hidden="true">#</a></h2><p>loader 用于对模块的源代码进行转换。</p><p>loader 可以使你在 import 或 &quot;load(加载)&quot; 模块时预处理文件</p><p>loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript 或者将内联图像转换为 data URL。</p><h3 id="loader-特性" tabindex="-1">loader 特性 <a class="header-anchor" href="#loader-特性" aria-hidden="true">#</a></h3><ul><li>loader <code>支持链式调用</code>。链中的每个 loader 会将转换应用在已处理过的资源上。一组链式的 loader 将按照相反的顺序执行。链中的第一个 loader 将其结果（也就是应用过转换后的资源）传递给下一个 loader，依此类推。最后，<code>链中的最后一个 loader，返回 webpack 所期望的 JavaScript</code>。</li><li>loader <code>可以是同步的，也可以是异步的</code>。</li><li>loader <code>运行在 Node.js 中</code>，并且能够执行任何操作。</li><li>loader 可以通过 options 对象配置</li><li>插件(plugin)可以为 loader 带来更多特性。</li><li>loader <code>能够产生额外的任意文件</code>。</li></ul><p>多数情况下，loader 将从 模块路径 加载（通常是从 npm install, node_modules 进行加载）。</p><h3 id="常见的-loader" tabindex="-1">常见的 loader <a class="header-anchor" href="#常见的-loader" aria-hidden="true">#</a></h3><ul><li>css-loader</li><li>style-loader</li><li>sass-loader</li><li>less-loader</li><li>babel-loader</li><li>ts-loader</li><li>file-loader</li><li>url-loader</li><li>html-minify-loader</li></ul><blockquote><p>parse -&gt; ast -&gt; transform -&gt; ast -&gt; genCode -&gt; target Code</p></blockquote><h2 id="plugin-是什么-常见的-plugin" tabindex="-1">plugin 是什么？常见的 plugin <a class="header-anchor" href="#plugin-是什么-常见的-plugin" aria-hidden="true">#</a></h2><p>webpack 插件是一个具有 <code>apply</code> 方法的 JavaScript 对象。</p><p>apply 方法会被 <code>webpack compiler 调用</code>，并且在整个编译生命周期都可以访问 compiler 对象。</p><h3 id="常见-plugin" tabindex="-1">常见 plugin <a class="header-anchor" href="#常见-plugin" aria-hidden="true">#</a></h3><ul><li></li></ul><h3 id="loader-和-plugin-的区别" tabindex="-1">loader 和 plugin 的区别 <a class="header-anchor" href="#loader-和-plugin-的区别" aria-hidden="true">#</a></h3><ol><li><p>loader 用于加载某些资源文件。因为 webpack 只能理解 JavaScript 和 JSON 文件，对于其他资源例如 css，图片，或者其他的语法集，比如 jsx， coffee，是没有办法加载的。 这就需要对应的 loader 将资源转化，加载进来。从字面意思也能看出，loader 是用于加载的，它作用于一个个文件上。</p></li><li><p>plugin 用于扩展 webpack 的功能。目的在于解决 loader 无法实现的其他事,它直接作用于 webpack，扩展了它的功能。当然 loader 也是变相的扩展了 webpack ，但是它只专注于转化文件（transform）这一个领域。而 plugin 的功能更加的丰富，而不仅局限于资源的加载。</p></li></ol><h2 id="sourcemap-是什么-怎么用" tabindex="-1">sourceMap 是什么？怎么用？ <a class="header-anchor" href="#sourcemap-是什么-怎么用" aria-hidden="true">#</a></h2><h3 id="什么是-sourcemap" tabindex="-1">什么是 Sourcemap <a class="header-anchor" href="#什么是-sourcemap" aria-hidden="true">#</a></h3><p>Sourcemap 本质上是一个信息文件，里面储存着代码转换前后的对应位置信息。<code>它记录了转换压缩后的代码所对应的转换前的源代码位置，是源代码和生产代码的映射</code>。 Sourcemap 解决了在打包过程中，代码经过压缩，去空格以及 babel 编译转化后，由于代码之间差异性过大，造成无法debug的问题。</p><h3 id="怎么使用" tabindex="-1">怎么使用 <a class="header-anchor" href="#怎么使用" aria-hidden="true">#</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// package.json</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">main.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 不推荐</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">devtool</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">source-map</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>source 字段说明</p><ul><li><p>cheap: 只能定位到对应的 js 文件，生成单独的 .js.map 文件（外连）</p></li><li><p>cheap-module：可以定位到源代码的第几行，生成单独的 .js.map 文件（外连）</p></li><li><p>inline：source-map 放在打包后的 js 文件内部（内连）</p></li><li><p>eval: 同上，但是每个 js 文件单独生成对应的 map 文件</p></li><li><p>开发环境： <code>devtool: cheap-module-eval-source-map</code></p></li><li><p>生产环境： <code>devtool: cheap-module-source-map</code></p></li></ul><h2 id="webpack-的-module、chunk、bundle-又怎么区别" tabindex="-1">webpack 的 module、chunk、bundle 又怎么区别 <a class="header-anchor" href="#webpack-的-module、chunk、bundle-又怎么区别" aria-hidden="true">#</a></h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ae2804df7064ee183b64c391e229f09~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt=""></p><ol><li>对于一份同逻辑的代码，当我们手写下一个一个的文件，它们无论是 ESM 还是 commonJS 或是 AMD，他们都是 module ；</li><li>当我们写的 module 源文件传到 webpack 进行打包时，webpack 会根据文件引用关系生成 chunk 文件，webpack 会对这个 chunk 文件进行一些操作；</li><li>webpack 处理好 chunk 文件后，最后会输出 bundle 文件，这个 bundle 文件包含了经过加载和编译的最终源文件，所以它可以直接在浏览器中运行。</li></ol><blockquote><p>我们直接写出来的是 module，webpack 处理时是 chunk，最后生成浏览器可以直接运行的 bundle。</p></blockquote><h2 id="webpack文件指纹中-hash、chunkhash-和-contenthash-的区别" tabindex="-1">webpack文件指纹中 hash、chunkhash 和 contenthash 的区别 <a class="header-anchor" href="#webpack文件指纹中-hash、chunkhash-和-contenthash-的区别" aria-hidden="true">#</a></h2><ul><li>hash：一整个项目，一次打包，只有一个hash值</li><li>chunkhash: 根据chunk生成hash值，来源于同一个chunk，则hash值就一样(入口文件及其依赖构成一个 chunk，共享一个chunkhash)</li><li>contenthash: 根据内容生成hash值，文件内容相同hash值就相同</li></ul><h3 id="文件指纹是什么" tabindex="-1">文件指纹是什么 <a class="header-anchor" href="#文件指纹是什么" aria-hidden="true">#</a></h3><p>文件指纹就是打包后输出的⽂件名的后缀，主要用来对修改后的文件做版本区分。</p><ol><li>Hash：和整个项⽬的构建相关，只要项⽬⽂件有修改，整个项⽬构建的 hash 值就会更改，一般用于图片设置；</li><li>Chunkhash：与 webpack 打包的 chunk 有关，不同的 entry 会⽣成不同的 chunkhash 值，一般用于设置JS文件；</li><li>Contenthash：根据⽂件内容来定义 hash ，⽂件内容不变，则 contenthash 不变，一般用于设置CSS文件；</li></ol><h2 id="webpack-hmr-的原理" tabindex="-1">webpack HMR 的原理 <a class="header-anchor" href="#webpack-hmr-的原理" aria-hidden="true">#</a></h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6446a659b4064b6a96df451bfe674b43~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt=""></p><h2 id="babel-的原理-常见的-babel-有哪些" tabindex="-1">babel 的原理？常见的 babel 有哪些？ <a class="header-anchor" href="#babel-的原理-常见的-babel-有哪些" aria-hidden="true">#</a></h2><p>Babel 是一个JavaScript编译器，主要用于将 ECMAScript 2015+ 版本的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。</p><ul><li><a href="https://juejin.cn/post/7203359540561117240" target="_blank" rel="noreferrer">Babel配置详解</a></li></ul><h2 id="tree-shaking-原理是什么" tabindex="-1">tree-shaking 原理是什么 <a class="header-anchor" href="#tree-shaking-原理是什么" aria-hidden="true">#</a></h2><p>Tree shaking 是一种通过清除多余代码方式来优化项目打包体积的技术，专业术语叫 Dead code elimination</p><p>Tree Shaking 在去除代码冗余的过程中，程序会从入口文件出发，扫描所有的模块依赖，以及模块的子依赖，然后将它们链接起来形成一个 “抽象语法树” (AST)。随后，运行所有代码，查看哪些代码是用到过的，做好标记。最后，再将“抽象语法树”中没有用到的代码“摇落”。经历这样一个过程后，就去除了没有用到的代码。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bed23d8877d4ddf8ffc249f7cbbf276~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><blockquote><p>前提是模块必须采用 ES6 Module 语法，因为 Tree Shaking 依赖 ES6 的静态语法：import 和 export。</p></blockquote><h3 id="sideeffect" tabindex="-1">sideEffect <a class="header-anchor" href="#sideeffect" aria-hidden="true">#</a></h3><p>sideEffect(副作用) 的定义是，在导入时会执行特殊行为的代码，而不是仅仅暴露一个 export 或多个 export。</p><p>webpack v4 开始新增了一个 sideEffects 特性，通过给 package.json 加入 sideEffects: false 声明该包模块是否包含副作用，从而可以为 Tree Shaking 提供更大的优化空间。</p><ul><li><a href="http://zoo.zhengcaiyun.cn/blog/article/treeshaking" target="_blank" rel="noreferrer">带你了解 tree-shaking</a></li></ul><div class="warning custom-block"><p class="custom-block-title">sideEffect</p><p>前面说了半天 sideEffect 可以用来声明哪些模块没有副作用？那么这个副作用到底是什么？</p><p>比如最简单的，我们在一个 jsx 文件里面导入了一个 css 文件和一个 js 文件，如下</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./index1.css</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// demo 组件需要的 css 样式</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./index2.css</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// demo 组件完全不需要的 css 样式</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleClick1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">handleClick2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./utils</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Demo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleClick1</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">点击</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>安装 tree-shaking 消除无用代码的逻辑， handleClick2 在这个 js 文件中并没有被使用到，所以 <code>handleClick2 打包时会被移除</code>，但是对于 css 文件，webpack 就认为其有副作用，即 js 中没有明确使用到 css 文件（无论是不是我们真的需要的），所以在打包时会把<code>两个 css 文件都打包进去不会被移除</code></p><p>但是如果我们明确知道这个 index2.css 是没有副作用即移除之后不会对 js 文件有其他影响的话，我们就可以通过 sideEffect 来移除这个文件,通过配置：</p><blockquote><p><code>sideEffect: [&#39;index2.css&#39;]</code></p></blockquote><p>配置这个选项之后，webpack 在打包过程遇到这个 css 文件就知道他是无副作用的，就可以在打包阶段给移除掉，从而减少打包体积</p></div><h2 id="如何减小打包体积" tabindex="-1">如何减小打包体积 <a class="header-anchor" href="#如何减小打包体积" aria-hidden="true">#</a></h2><ul><li>组件库按需引入</li><li>组件路由懒加载</li><li>使用 cdn 代替</li><li>第三方包单独提取 <ul><li>splitChunks</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">splitChunks</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">cacheGroups</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">vendors</span><span style="color:#89DDFF;">:{</span><span style="color:#676E95;font-style:italic;">//node_modules里的代码</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">/[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#FFCB6B;">chunks</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">initial</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vendors</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//chunks name</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#FFCB6B;">priority</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//优先级</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#FFCB6B;">enforce</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>压缩打包后的js文件 <ul><li>uglifyjs-webpack-plugin （webpack 3 使用）</li><li>terser-webpack-plugin （webpack 4/5 推荐使用这个，5已结默认使用这个了）</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//这个配置和module，plugins是同级的</span></span>
<span class="line"><span style="color:#FFCB6B;">optimization</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">minimizer</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">[</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">UglifyJsPlugin</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//压缩js</span></span>
<span class="line"><span style="color:#F07178;">            cache</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            parallel</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            sourceMap</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    ]</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> TerserPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">terser-webpack-plugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">minimize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">minimizer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TerserPlugin</span><span style="color:#A6ACCD;">()]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><ul><li>压缩css <ul><li>单独提取 css 为独立文件： mini-css-extract-plugin</li></ul></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//在顶部引入</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MiniCssExtractPlugin</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mini-css-extract-plugin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//在plugins里添加</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MiniCssExtractPlugin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//提取css</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">css/main.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"></span></code></pre></div><pre><code>- 压缩 css 代码体积：optimize-css-assets-webpack-plugin
</code></pre><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//这个配置和module，plugins是同级的</span></span>
<span class="line"><span style="color:#FFCB6B;">optimization</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">minimizer</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">[</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">OptimizeCSSAssetsPlugin</span><span style="color:#F07178;">()</span><span style="color:#676E95;font-style:italic;">//压缩css</span></span>
<span class="line"><span style="color:#F07178;">    ]</span></span>
<span class="line"><span style="color:#89DDFF;">},</span></span>
<span class="line"></span></code></pre></div><h2 id="如何提高打包、构建速度" tabindex="-1">如何提高打包、构建速度 <a class="header-anchor" href="#如何提高打包、构建速度" aria-hidden="true">#</a></h2><ul><li>label-loader 开启缓存</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#A6ACCD;">  	</span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      	</span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 开启缓存</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">babel-loader?cacheDirectory=true</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">exclude</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ul><li>减少文件搜索范围</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#A6ACCD;">  	</span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      	</span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">babel-loader?cacheDirectory=true</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 只对src目录下的文件进行babel-loader转换</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">include</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="main、module、exports-入口的区别" tabindex="-1">main、module、exports 入口的区别 <a class="header-anchor" href="#main、module、exports-入口的区别" aria-hidden="true">#</a></h2><ul><li>main： cjs 入口</li><li>module： esm 入口</li></ul><h2 id="webpack-style-loader-和-css-loader-区别" tabindex="-1">webpack style-loader 和 css-loader 区别 <a class="header-anchor" href="#webpack-style-loader-和-css-loader-区别" aria-hidden="true">#</a></h2><ul><li>css-loader帮助我们解析css成为js对象</li><li>style-loader可以从css-loader解析的对象中提取css样式挂载到页面当中</li></ul><h2 id="webpack-怎么配置-ts-打包" tabindex="-1">webpack 怎么配置 ts 打包 <a class="header-anchor" href="#webpack-怎么配置-ts-打包" aria-hidden="true">#</a></h2>`,85),o=[p];function c(t,r,i,d,y,D){return l(),a("div",null,o)}const u=s(e,[["render",c]]);export{h as __pageData,u as default};
