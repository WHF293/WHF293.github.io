import{_ as s,c as a,o as e,e as l}from"./app.e531ddc1.js";const u=JSON.parse('{"title":"面试题目-02","description":"","frontmatter":{},"headers":[{"level":2,"title":"Map 和 Set 的区别，Map 和 Object 的区别","slug":"map-和-set-的区别-map-和-object-的区别","link":"#map-和-set-的区别-map-和-object-的区别","children":[]},{"level":2,"title":"说一下 weekMap 和 weekSet","slug":"说一下-weekmap-和-weekset","link":"#说一下-weekmap-和-weekset","children":[]},{"level":2,"title":"数组的 filter、every、flat 的作用是什么","slug":"数组的-filter、every、flat-的作用是什么","link":"#数组的-filter、every、flat-的作用是什么","children":[]},{"level":2,"title":"es6 有哪些新特性","slug":"es6-有哪些新特性","link":"#es6-有哪些新特性","children":[]},{"level":2,"title":"箭头函数和普通函数的区别","slug":"箭头函数和普通函数的区别","link":"#箭头函数和普通函数的区别","children":[]},{"level":2,"title":"instanceof 的实现原理","slug":"instanceof-的实现原理","link":"#instanceof-的实现原理","children":[]},{"level":2,"title":"new 操作符做了哪些事情，以及它的的实现原理","slug":"new-操作符做了哪些事情-以及它的的实现原理","link":"#new-操作符做了哪些事情-以及它的的实现原理","children":[]},{"level":2,"title":"分别介绍一下原型、原型链、作用域和作用域链的含义和使用场景","slug":"分别介绍一下原型、原型链、作用域和作用域链的含义和使用场景","link":"#分别介绍一下原型、原型链、作用域和作用域链的含义和使用场景","children":[]},{"level":2,"title":"visibility、display、opacity 的区别","slug":"visibility、display、opacity-的区别","link":"#visibility、display、opacity-的区别","children":[]},{"level":2,"title":"transition、transform、translate 的区别","slug":"transition、transform、translate-的区别","link":"#transition、transform、translate-的区别","children":[]},{"level":2,"title":"如何画一条 0.5px 的边框","slug":"如何画一条-0-5px-的边框","link":"#如何画一条-0-5px-的边框","children":[]},{"level":2,"title":"parent 元素宽高不定，实现 scale 固定宽高比始终为 4：3","slug":"parent-元素宽高不定-实现-scale-固定宽高比始终为-4-3","link":"#parent-元素宽高不定-实现-scale-固定宽高比始终为-4-3","children":[]},{"level":2,"title":"CSS 垂直居中的方案","slug":"css-垂直居中的方案","link":"#css-垂直居中的方案","children":[]},{"level":2,"title":"伪元素和伪类的区别","slug":"伪元素和伪类的区别","link":"#伪元素和伪类的区别","children":[]},{"level":2,"title":"说一下盒模型","slug":"说一下盒模型","link":"#说一下盒模型","children":[]},{"level":2,"title":"响应式布局方案","slug":"响应式布局方案","link":"#响应式布局方案","children":[]},{"level":2,"title":"提升动画性能，GPU 加速","slug":"提升动画性能-gpu-加速","link":"#提升动画性能-gpu-加速","children":[]},{"level":2,"title":"React-router、vue-router 原理","slug":"react-router、vue-router-原理","link":"#react-router、vue-router-原理","children":[]},{"level":2,"title":"react router 的 Link 标签和 html 的 a 标签有什么区别","slug":"react-router-的-link-标签和-html-的-a-标签有什么区别","link":"#react-router-的-link-标签和-html-的-a-标签有什么区别","children":[]},{"level":2,"title":"vue 和 react 的区别","slug":"vue-和-react-的区别","link":"#vue-和-react-的区别","children":[]},{"level":2,"title":"说一下 css module，以及它的原理","slug":"说一下-css-module-以及它的原理","link":"#说一下-css-module-以及它的原理","children":[]},{"level":2,"title":"react diff 算法和 vue diff 算法的区别","slug":"react-diff-算法和-vue-diff-算法的区别","link":"#react-diff-算法和-vue-diff-算法的区别","children":[]},{"level":2,"title":"SPA 单页面应用和多页面应用有什么区别","slug":"spa-单页面应用和多页面应用有什么区别","link":"#spa-单页面应用和多页面应用有什么区别","children":[]},{"level":2,"title":"vue 中 watch 能监听 computed 的属性吗","slug":"vue-中-watch-能监听-computed-的属性吗","link":"#vue-中-watch-能监听-computed-的属性吗","children":[]},{"level":2,"title":"nextTick 原理","slug":"nexttick-原理","link":"#nexttick-原理","children":[]},{"level":2,"title":"vue 模板（template）里为什么不能使用多个头结点？","slug":"vue-模板-template-里为什么不能使用多个头结点","link":"#vue-模板-template-里为什么不能使用多个头结点","children":[]},{"level":2,"title":"vue3 的 template 为什么可以多根节点？","slug":"vue3-的-template-为什么可以多根节点","link":"#vue3-的-template-为什么可以多根节点","children":[]},{"level":2,"title":"keep-alive 的原理，使用有什么问题？如何解决","slug":"keep-alive-的原理-使用有什么问题-如何解决","link":"#keep-alive-的原理-使用有什么问题-如何解决","children":[]},{"level":2,"title":"setState 是同步还是异步的","slug":"setstate-是同步还是异步的","link":"#setstate-是同步还是异步的","children":[]},{"level":2,"title":"简述一下 fiber 的实现原理","slug":"简述一下-fiber-的实现原理","link":"#简述一下-fiber-的实现原理","children":[]},{"level":2,"title":"fiber 的时间调度通过哪两个原生 api 实现的","slug":"fiber-的时间调度通过哪两个原生-api-实现的","link":"#fiber-的时间调度通过哪两个原生-api-实现的","children":[]},{"level":2,"title":"说下 React 合成事件，以及它是如何实现的","slug":"说下-react-合成事件-以及它是如何实现的","link":"#说下-react-合成事件-以及它是如何实现的","children":[]},{"level":2,"title":"useEffect 的使用方法？useEffect 的 return 会在什么时候执行？useEffect 原理是什么","slug":"useeffect-的使用方法-useeffect-的-return-会在什么时候执行-useeffect-原理是什么","link":"#useeffect-的使用方法-useeffect-的-return-会在什么时候执行-useeffect-原理是什么","children":[]},{"level":2,"title":"useMemo 和 useCallback 的区别，它们的实现原理是什么？","slug":"usememo-和-usecallback-的区别-它们的实现原理是什么","link":"#usememo-和-usecallback-的区别-它们的实现原理是什么","children":[]},{"level":2,"title":"useEffect、useMemo、useCallback 是如何做依赖收集的","slug":"useeffect、usememo、usecallback-是如何做依赖收集的","link":"#useeffect、usememo、usecallback-是如何做依赖收集的","children":[]},{"level":2,"title":"context 的实现原理是什么？如何做依赖收集？","slug":"context-的实现原理是什么-如何做依赖收集","link":"#context-的实现原理是什么-如何做依赖收集","children":[]},{"level":2,"title":"PureComponent 和 Component 的区别","slug":"purecomponent-和-component-的区别","link":"#purecomponent-和-component-的区别","children":[]},{"level":2,"title":"React dom 绑定事件和原生事件有什么区别","slug":"react-dom-绑定事件和原生事件有什么区别","link":"#react-dom-绑定事件和原生事件有什么区别","children":[]},{"level":2,"title":"说一下对 tree-shaking 的了解，对 CommonJS 和 ESM 都可以用 tree-shaking 吗","slug":"说一下对-tree-shaking-的了解-对-commonjs-和-esm-都可以用-tree-shaking-吗","link":"#说一下对-tree-shaking-的了解-对-commonjs-和-esm-都可以用-tree-shaking-吗","children":[]},{"level":2,"title":"css-loader 的作用是什么？不使用 css-loader 行不行","slug":"css-loader-的作用是什么-不使用-css-loader-行不行","link":"#css-loader-的作用是什么-不使用-css-loader-行不行","children":[]},{"level":2,"title":"webpack 中 plugin 和 laoder 的区别，它们的执行时机，以及常用的 plugin 和 loader","slug":"webpack-中-plugin-和-laoder-的区别-它们的执行时机-以及常用的-plugin-和-loader","link":"#webpack-中-plugin-和-laoder-的区别-它们的执行时机-以及常用的-plugin-和-loader","children":[]},{"level":2,"title":"介绍一下 http 缓存","slug":"介绍一下-http-缓存","link":"#介绍一下-http-缓存","children":[]},{"level":2,"title":"哪些是宏任务？哪些是微任务？","slug":"哪些是宏任务-哪些是微任务","link":"#哪些是宏任务-哪些是微任务","children":[]},{"level":2,"title":"如何理解 script 标签是个宏任务","slug":"如何理解-script-标签是个宏任务","link":"#如何理解-script-标签是个宏任务","children":[]},{"level":2,"title":"说下 requestAnimationFrame","slug":"说下-requestanimationframe","link":"#说下-requestanimationframe","children":[]},{"level":2,"title":"script 标签为什么要放在底部","slug":"script-标签为什么要放在底部","link":"#script-标签为什么要放在底部","children":[]},{"level":2,"title":"defer 和 async 的区别，以及它们的加载和执行时机","slug":"defer-和-async-的区别-以及它们的加载和执行时机","link":"#defer-和-async-的区别-以及它们的加载和执行时机","children":[]},{"level":2,"title":"DOM 事件模型。事件捕获和事件冒泡的使用场景","slug":"dom-事件模型。事件捕获和事件冒泡的使用场景","link":"#dom-事件模型。事件捕获和事件冒泡的使用场景","children":[]},{"level":2,"title":"从输入 url 到页面展示的过程","slug":"从输入-url-到页面展示的过程","link":"#从输入-url-到页面展示的过程","children":[]},{"level":2,"title":"xss 和 csrf 的概念和防御方式","slug":"xss-和-csrf-的概念和防御方式","link":"#xss-和-csrf-的概念和防御方式","children":[]},{"level":2,"title":"tcp 三次握手和四次挥手的步骤","slug":"tcp-三次握手和四次挥手的步骤","link":"#tcp-三次握手和四次挥手的步骤","children":[]},{"level":2,"title":"说说小程序的三层架构","slug":"说说小程序的三层架构","link":"#说说小程序的三层架构","children":[]},{"level":2,"title":"小程序体积压缩的方案","slug":"小程序体积压缩的方案","link":"#小程序体积压缩的方案","children":[]},{"level":2,"title":"手写快排","slug":"手写快排","link":"#手写快排","children":[]},{"level":2,"title":"手写深拷贝","slug":"手写深拷贝","link":"#手写深拷贝","children":[]},{"level":2,"title":"手写防抖节流","slug":"手写防抖节流","link":"#手写防抖节流","children":[]},{"level":2,"title":"手写 call apply","slug":"手写-call-apply","link":"#手写-call-apply","children":[]},{"level":2,"title":"实现 bind 函数","slug":"实现-bind-函数","link":"#实现-bind-函数","children":[]},{"level":2,"title":"手写 promise promise.all/race/allSettled","slug":"手写-promise-promise-all-race-allsettled","link":"#手写-promise-promise-all-race-allsettled","children":[]},{"level":2,"title":"手写限制并发数量","slug":"手写限制并发数量","link":"#手写限制并发数量","children":[]},{"level":2,"title":"手写数组转树结构","slug":"手写数组转树结构","link":"#手写数组转树结构","children":[]},{"level":2,"title":"手写解析 url 所有成分","slug":"手写解析-url-所有成分","link":"#手写解析-url-所有成分","children":[]},{"level":2,"title":"实现一个 compare 函数，比较两个对象是否相同","slug":"实现一个-compare-函数-比较两个对象是否相同","link":"#实现一个-compare-函数-比较两个对象是否相同","children":[]},{"level":2,"title":"判断链表是否有环","slug":"判断链表是否有环","link":"#判断链表是否有环","children":[]},{"level":2,"title":"手写 useReducer","slug":"手写-usereducer","link":"#手写-usereducer","children":[]},{"level":2,"title":"函数柯里化","slug":"函数柯里化","link":"#函数柯里化","children":[]},{"level":2,"title":"长列表的优化方案","slug":"长列表的优化方案","link":"#长列表的优化方案","children":[]},{"level":2,"title":"使用 hash 路由时，怎么能再刷新后时候自动滚动到页面上次的锚点位置？","slug":"使用-hash-路由时-怎么能再刷新后时候自动滚动到页面上次的锚点位置","link":"#使用-hash-路由时-怎么能再刷新后时候自动滚动到页面上次的锚点位置","children":[]},{"level":2,"title":"使用 hash 路由时，和 a 标签的锚点相冲突，怎么解决？","slug":"使用-hash-路由时-和-a-标签的锚点相冲突-怎么解决","link":"#使用-hash-路由时-和-a-标签的锚点相冲突-怎么解决","children":[]},{"level":2,"title":"前端怎样对用户的数据进行加密传输","slug":"前端怎样对用户的数据进行加密传输","link":"#前端怎样对用户的数据进行加密传输","children":[]},{"level":2,"title":"基于 md5 提升安全性","slug":"基于-md5-提升安全性","link":"#基于-md5-提升安全性","children":[]},{"level":2,"title":"如何解决 vue 初始化页面闪动问题","slug":"如何解决-vue-初始化页面闪动问题","link":"#如何解决-vue-初始化页面闪动问题","children":[]}],"relativePath":"interview/面试题目-02.md","lastUpdated":1675826282000}'),n={name:"interview/面试题目-02.md"},o=l(`<h1 id="面试题目-02" tabindex="-1">面试题目-02 <a class="header-anchor" href="#面试题目-02" aria-hidden="true">#</a></h1><p><a href="https://juejin.cn/post/7013953652578582558" target="_blank" rel="noreferrer">前端两年经验，历时一个月的面经和总结</a></p><h2 id="map-和-set-的区别-map-和-object-的区别" tabindex="-1">Map 和 Set 的区别，Map 和 Object 的区别 <a class="header-anchor" href="#map-和-set-的区别-map-和-object-的区别" aria-hidden="true">#</a></h2><h2 id="说一下-weekmap-和-weekset" tabindex="-1">说一下 weekMap 和 weekSet <a class="header-anchor" href="#说一下-weekmap-和-weekset" aria-hidden="true">#</a></h2><h2 id="数组的-filter、every、flat-的作用是什么" tabindex="-1">数组的 filter、every、flat 的作用是什么 <a class="header-anchor" href="#数组的-filter、every、flat-的作用是什么" aria-hidden="true">#</a></h2><h2 id="es6-有哪些新特性" tabindex="-1">es6 有哪些新特性 <a class="header-anchor" href="#es6-有哪些新特性" aria-hidden="true">#</a></h2><ul><li><a href="http://www.alloyteam.com/2016/03/es6-front-end-developers-will-have-to-know-the-top-ten-properties/" target="_blank" rel="noreferrer">前端开发者不得不知的 ES6 十大特性</a></li></ul><h2 id="箭头函数和普通函数的区别" tabindex="-1">箭头函数和普通函数的区别 <a class="header-anchor" href="#箭头函数和普通函数的区别" aria-hidden="true">#</a></h2><ul><li><a href="https://segmentfault.com/a/1190000021380336" target="_blank" rel="noreferrer">箭头函数和普通函数的区别</a></li></ul><h2 id="instanceof-的实现原理" tabindex="-1">instanceof 的实现原理 <a class="header-anchor" href="#instanceof-的实现原理" aria-hidden="true">#</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/105487552" target="_blank" rel="noreferrer">彻底了解 instanceof 的底层实现原理</a></li></ul><h2 id="new-操作符做了哪些事情-以及它的的实现原理" tabindex="-1">new 操作符做了哪些事情，以及它的的实现原理 <a class="header-anchor" href="#new-操作符做了哪些事情-以及它的的实现原理" aria-hidden="true">#</a></h2><ul><li><p><a href="https://juejin.cn/post/6994000994300330021" target="_blank" rel="noreferrer">谈谈 JS 中 new 的原理与实现</a></p><p>new 操作符新建了一个空对象，这个对象原型指向构造函数的 prototype，执行构造函数后返回这个对象。</p></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 低配版 new 的实现</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">_new</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">constructor</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 构造函数类型合法判断</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">constructor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">constructor must be a function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 新建空对象实例</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 将构造函数的原型绑定到新创的对象实例上</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#F07178;">(</span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 调用构造函数并判断返回值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">constructor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isObject</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isFunction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果有返回值且返回值是对象类型，那么就将它作为返回值，否则就返回之前新建的对象</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isObject</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isFunction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="分别介绍一下原型、原型链、作用域和作用域链的含义和使用场景" tabindex="-1">分别介绍一下原型、原型链、作用域和作用域链的含义和使用场景 <a class="header-anchor" href="#分别介绍一下原型、原型链、作用域和作用域链的含义和使用场景" aria-hidden="true">#</a></h2><h2 id="visibility、display、opacity-的区别" tabindex="-1">visibility、display、opacity 的区别 <a class="header-anchor" href="#visibility、display、opacity-的区别" aria-hidden="true">#</a></h2><h2 id="transition、transform、translate-的区别" tabindex="-1">transition、transform、translate 的区别 <a class="header-anchor" href="#transition、transform、translate-的区别" aria-hidden="true">#</a></h2><h2 id="如何画一条-0-5px-的边框" tabindex="-1">如何画一条 0.5px 的边框 <a class="header-anchor" href="#如何画一条-0-5px-的边框" aria-hidden="true">#</a></h2><h2 id="parent-元素宽高不定-实现-scale-固定宽高比始终为-4-3" tabindex="-1">parent 元素宽高不定，实现 scale 固定宽高比始终为 4：3 <a class="header-anchor" href="#parent-元素宽高不定-实现-scale-固定宽高比始终为-4-3" aria-hidden="true">#</a></h2><h2 id="css-垂直居中的方案" tabindex="-1">CSS 垂直居中的方案 <a class="header-anchor" href="#css-垂直居中的方案" aria-hidden="true">#</a></h2><h2 id="伪元素和伪类的区别" tabindex="-1">伪元素和伪类的区别 <a class="header-anchor" href="#伪元素和伪类的区别" aria-hidden="true">#</a></h2><h2 id="说一下盒模型" tabindex="-1">说一下盒模型 <a class="header-anchor" href="#说一下盒模型" aria-hidden="true">#</a></h2><h2 id="响应式布局方案" tabindex="-1">响应式布局方案 <a class="header-anchor" href="#响应式布局方案" aria-hidden="true">#</a></h2><h2 id="提升动画性能-gpu-加速" tabindex="-1">提升动画性能，GPU 加速 <a class="header-anchor" href="#提升动画性能-gpu-加速" aria-hidden="true">#</a></h2><h2 id="react-router、vue-router-原理" tabindex="-1">React-router、vue-router 原理 <a class="header-anchor" href="#react-router、vue-router-原理" aria-hidden="true">#</a></h2><h2 id="react-router-的-link-标签和-html-的-a-标签有什么区别" tabindex="-1">react router 的 Link 标签和 html 的 a 标签有什么区别 <a class="header-anchor" href="#react-router-的-link-标签和-html-的-a-标签有什么区别" aria-hidden="true">#</a></h2><h2 id="vue-和-react-的区别" tabindex="-1">vue 和 react 的区别 <a class="header-anchor" href="#vue-和-react-的区别" aria-hidden="true">#</a></h2><ul><li><a href="https://juejin.cn/post/6844903974437388295" target="_blank" rel="noreferrer">前端框架用 vue 还是 react？清晰对比两者差异</a></li></ul><h2 id="说一下-css-module-以及它的原理" tabindex="-1">说一下 css module，以及它的原理 <a class="header-anchor" href="#说一下-css-module-以及它的原理" aria-hidden="true">#</a></h2><h2 id="react-diff-算法和-vue-diff-算法的区别" tabindex="-1">react diff 算法和 vue diff 算法的区别 <a class="header-anchor" href="#react-diff-算法和-vue-diff-算法的区别" aria-hidden="true">#</a></h2><h2 id="spa-单页面应用和多页面应用有什么区别" tabindex="-1">SPA 单页面应用和多页面应用有什么区别 <a class="header-anchor" href="#spa-单页面应用和多页面应用有什么区别" aria-hidden="true">#</a></h2><h2 id="vue-中-watch-能监听-computed-的属性吗" tabindex="-1">vue 中 watch 能监听 computed 的属性吗 <a class="header-anchor" href="#vue-中-watch-能监听-computed-的属性吗" aria-hidden="true">#</a></h2><h2 id="nexttick-原理" tabindex="-1">nextTick 原理 <a class="header-anchor" href="#nexttick-原理" aria-hidden="true">#</a></h2><h2 id="vue-模板-template-里为什么不能使用多个头结点" tabindex="-1">vue 模板（template）里为什么不能使用多个头结点？ <a class="header-anchor" href="#vue-模板-template-里为什么不能使用多个头结点" aria-hidden="true">#</a></h2><ul><li><a href="https://blog.csdn.net/Leatitia/article/details/98186614" target="_blank" rel="noreferrer">vue 为什么要求组件模板只能有一个根元素</a></li></ul><h2 id="vue3-的-template-为什么可以多根节点" tabindex="-1">vue3 的 template 为什么可以多根节点？ <a class="header-anchor" href="#vue3-的-template-为什么可以多根节点" aria-hidden="true">#</a></h2><h2 id="keep-alive-的原理-使用有什么问题-如何解决" tabindex="-1">keep-alive 的原理，使用有什么问题？如何解决 <a class="header-anchor" href="#keep-alive-的原理-使用有什么问题-如何解决" aria-hidden="true">#</a></h2><ul><li><a href="https://juejin.cn/post/6844903837770203144" target="_blank" rel="noreferrer">彻底揭秘 keep-alive 原理</a></li></ul><h2 id="setstate-是同步还是异步的" tabindex="-1">setState 是同步还是异步的 <a class="header-anchor" href="#setstate-是同步还是异步的" aria-hidden="true">#</a></h2><h2 id="简述一下-fiber-的实现原理" tabindex="-1">简述一下 fiber 的实现原理 <a class="header-anchor" href="#简述一下-fiber-的实现原理" aria-hidden="true">#</a></h2><h2 id="fiber-的时间调度通过哪两个原生-api-实现的" tabindex="-1">fiber 的时间调度通过哪两个原生 api 实现的 <a class="header-anchor" href="#fiber-的时间调度通过哪两个原生-api-实现的" aria-hidden="true">#</a></h2><ul><li>requestAnimationFrame ？</li><li>requestIdleCallback ？</li></ul><h2 id="说下-react-合成事件-以及它是如何实现的" tabindex="-1">说下 React 合成事件，以及它是如何实现的 <a class="header-anchor" href="#说下-react-合成事件-以及它是如何实现的" aria-hidden="true">#</a></h2><h2 id="useeffect-的使用方法-useeffect-的-return-会在什么时候执行-useeffect-原理是什么" tabindex="-1">useEffect 的使用方法？useEffect 的 return 会在什么时候执行？useEffect 原理是什么 <a class="header-anchor" href="#useeffect-的使用方法-useeffect-的-return-会在什么时候执行-useeffect-原理是什么" aria-hidden="true">#</a></h2><h2 id="usememo-和-usecallback-的区别-它们的实现原理是什么" tabindex="-1">useMemo 和 useCallback 的区别，它们的实现原理是什么？ <a class="header-anchor" href="#usememo-和-usecallback-的区别-它们的实现原理是什么" aria-hidden="true">#</a></h2><h2 id="useeffect、usememo、usecallback-是如何做依赖收集的" tabindex="-1">useEffect、useMemo、useCallback 是如何做依赖收集的 <a class="header-anchor" href="#useeffect、usememo、usecallback-是如何做依赖收集的" aria-hidden="true">#</a></h2><h2 id="context-的实现原理是什么-如何做依赖收集" tabindex="-1">context 的实现原理是什么？如何做依赖收集？ <a class="header-anchor" href="#context-的实现原理是什么-如何做依赖收集" aria-hidden="true">#</a></h2><h2 id="purecomponent-和-component-的区别" tabindex="-1">PureComponent 和 Component 的区别 <a class="header-anchor" href="#purecomponent-和-component-的区别" aria-hidden="true">#</a></h2><h2 id="react-dom-绑定事件和原生事件有什么区别" tabindex="-1">React dom 绑定事件和原生事件有什么区别 <a class="header-anchor" href="#react-dom-绑定事件和原生事件有什么区别" aria-hidden="true">#</a></h2><h2 id="说一下对-tree-shaking-的了解-对-commonjs-和-esm-都可以用-tree-shaking-吗" tabindex="-1">说一下对 tree-shaking 的了解，对 CommonJS 和 ESM 都可以用 tree-shaking 吗 <a class="header-anchor" href="#说一下对-tree-shaking-的了解-对-commonjs-和-esm-都可以用-tree-shaking-吗" aria-hidden="true">#</a></h2><h2 id="css-loader-的作用是什么-不使用-css-loader-行不行" tabindex="-1">css-loader 的作用是什么？不使用 css-loader 行不行 <a class="header-anchor" href="#css-loader-的作用是什么-不使用-css-loader-行不行" aria-hidden="true">#</a></h2><h2 id="webpack-中-plugin-和-laoder-的区别-它们的执行时机-以及常用的-plugin-和-loader" tabindex="-1">webpack 中 plugin 和 laoder 的区别，它们的执行时机，以及常用的 plugin 和 loader <a class="header-anchor" href="#webpack-中-plugin-和-laoder-的区别-它们的执行时机-以及常用的-plugin-和-loader" aria-hidden="true">#</a></h2><h2 id="介绍一下-http-缓存" tabindex="-1">介绍一下 http 缓存 <a class="header-anchor" href="#介绍一下-http-缓存" aria-hidden="true">#</a></h2><ul><li><p>强缓存/协商缓存的字端</p><ul><li>强缓存相关字段有 <code>expires，cache-control</code>。</li><li>协商缓存相关字段有 <code>Last-Modified/If-Modified-Since，Etag/If-None-Match</code></li></ul></li><li><p>cache-control、expires、etag 等字段的属性值是什么样的？</p><p>如果 cache-control 与 expires 同时存在的话，<code>cache-control 的优先级高于 expires</code>。</p></li><li><p>这些字段都被存放在请求的哪个部分？</p><p>header ?</p></li><li><p>last-modify 和 expires 这些字段的时间有什么区别？能否共存</p></li><li><p>cache-control 中的 no-cache 和 no-store 的区别</p></li></ul><h2 id="哪些是宏任务-哪些是微任务" tabindex="-1">哪些是宏任务？哪些是微任务？ <a class="header-anchor" href="#哪些是宏任务-哪些是微任务" aria-hidden="true">#</a></h2><h2 id="如何理解-script-标签是个宏任务" tabindex="-1">如何理解 script 标签是个宏任务 <a class="header-anchor" href="#如何理解-script-标签是个宏任务" aria-hidden="true">#</a></h2><h2 id="说下-requestanimationframe" tabindex="-1">说下 requestAnimationFrame <a class="header-anchor" href="#说下-requestanimationframe" aria-hidden="true">#</a></h2><h2 id="script-标签为什么要放在底部" tabindex="-1">script 标签为什么要放在底部 <a class="header-anchor" href="#script-标签为什么要放在底部" aria-hidden="true">#</a></h2><h2 id="defer-和-async-的区别-以及它们的加载和执行时机" tabindex="-1">defer 和 async 的区别，以及它们的加载和执行时机 <a class="header-anchor" href="#defer-和-async-的区别-以及它们的加载和执行时机" aria-hidden="true">#</a></h2><h2 id="dom-事件模型。事件捕获和事件冒泡的使用场景" tabindex="-1">DOM 事件模型。事件捕获和事件冒泡的使用场景 <a class="header-anchor" href="#dom-事件模型。事件捕获和事件冒泡的使用场景" aria-hidden="true">#</a></h2><h2 id="从输入-url-到页面展示的过程" tabindex="-1">从输入 url 到页面展示的过程 <a class="header-anchor" href="#从输入-url-到页面展示的过程" aria-hidden="true">#</a></h2><ul><li><p>步骤</p><ul><li>DNS 解析</li><li>TCP 连接</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回 HTTP 报文</li><li>浏览器解析渲染页面</li><li>连接结束</li></ul></li><li><p>详解</p><p>这是一个必考的面试问题， 输入 url 后，首先需要找到这个 url 域名的服务器 ip, 为了寻找这个 ip，浏览器首先会寻找缓存，查看缓存中是否有记录，</p><p>缓存的查找记录为：<code>浏览器缓存-》系统缓存-》路由器缓存</code>，</p><p>缓存中没有则查找系统的 hosts 文件中是否有记录，如果没有则查询 DNS 服务器，得到服务器的 ip 地址后，浏览器根据这个 ip 以及相应的端口号，</p><p>构造一个 http 请求，这个请求报文会包括这次请求的信息，主要是请求方法，请求说明和请求附带的数据，并将这个 http 请求封装在一个 tcp 包中，这个 tcp 包会依次经过<code>传输层，网络层，数据链路层，物理层</code>到达服务器，服务器解析这个请求来作出响应，返回相应的 html 给浏览器.</p><p>因为 html 是一个树形结构，浏览器根据这个 html 来构建<code>DOM 树，在dom树的构建过程中如果遇到JS 脚本和外部JS 连接，则会停止构建DOM 树来执行和下载相应的代码，这会造成阻塞</code>，这就是为什么推荐 JS 代码应该放在 html 代码的后面，</p><p>之后根据外部映射，内部映射，内联样式构建一个 CSS 对象模型树<code>CSSOM 树</code>，</p><p>构建完成后和 DOM 树合并为渲染树，这里主要做的是<code>排除非视觉节点</code>，比如 script，meta 标签和排除 display 为 none 的节点，</p><p>之后进行布局，<code>布局主要是确定各个元素的位置和尺寸</code>，</p><p>之后是渲染页面，因为 html 文件中会含有图片，视频，音频等资源，在解析 DOM 的过程中，遇到这些都会进行并行下载，浏览器对每个域的并行下载数量有一定的限制，一般是 4-6 个，当然在这些所有的请求中我们还需要关注的就是缓存，缓存一般通过 Cache-Control、Last-Modify、Expires 等首部字段控制。</p><p>Cache-Control 和 Expires 的区别在于 <code>Cache-Control 使用相对时间，Expires 使用的是基于服务器端的绝对时间</code>，因为存在时差问题，一般采用 Cache-Control，</p><p>在请求这些有设置了缓存的数据时，会先查看是否过期，如果没有过期则直接使用本地缓存，过期则请求并在服务器校验文件是否修改，</p><p>如果上一次响应设置了 ETag 值会在这次请求的时候作为 If-None-Match 的值交给服务器校验，如果一致，继续校验 Last-Modified，没有设置 ETag 则直接验证 Last-Modified，再决定是否返回 304。</p></li></ul><h2 id="xss-和-csrf-的概念和防御方式" tabindex="-1">xss 和 csrf 的概念和防御方式 <a class="header-anchor" href="#xss-和-csrf-的概念和防御方式" aria-hidden="true">#</a></h2><ul><li><p><code>CSRF</code>：<code>跨站请求伪造</code>，可以理解为攻击者盗用了用户的身份，以用户的名义发送了恶意请求.</p><p>比如用户登录了一个网站后，立刻在另一个ｔａｂ页面访问量攻击者用来制造攻击的网站，这个网站要求访问刚刚登陆的网站，并发送了一个恶意请求，这时候 CSRF 就产生了，比如这个制造攻击的网站使用一张图片，但是这种图片的链接却是可以修改数据库的，这时候攻击者就可以以用户的名义操作这个数据库</p><p>防御方式的话：使用验证码，检查 https 头部的 refer，使用 token。</p></li><li><p><code>XSS</code>：<code>跨站脚本攻击</code>，是说攻击者通过注入恶意的脚本，在用户浏览网页的时候进行攻击，</p><p>比如获取 cookie，或者其他用户身份信息，可以分为存储型和反型，存储型是攻击者输入一些数据并且存储到了数据库中，其他浏览者看到的时候进行攻击，反射型的话不存储在数据库中，往往表现为将攻击代码放在 url 地址的请求参数中</p><p>防御的话为 cookie 设置 httpOnly 属性，对用户的输入进行检查，进行特殊字符过滤。</p></li></ul><h2 id="tcp-三次握手和四次挥手的步骤" tabindex="-1">tcp 三次握手和四次挥手的步骤 <a class="header-anchor" href="#tcp-三次握手和四次挥手的步骤" aria-hidden="true">#</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/40013850" target="_blank" rel="noreferrer">TCP 三次握手四次挥手详解</a></li></ul><h2 id="说说小程序的三层架构" tabindex="-1">说说小程序的三层架构 <a class="header-anchor" href="#说说小程序的三层架构" aria-hidden="true">#</a></h2><ul><li><p>小程序架构为什么使用双线程</p></li><li><p>拆分逻辑层和渲染层有什么优势和劣势</p></li></ul><h2 id="小程序体积压缩的方案" tabindex="-1">小程序体积压缩的方案 <a class="header-anchor" href="#小程序体积压缩的方案" aria-hidden="true">#</a></h2><h2 id="手写快排" tabindex="-1">手写快排 <a class="header-anchor" href="#手写快排" aria-hidden="true">#</a></h2><h2 id="手写深拷贝" tabindex="-1">手写深拷贝 <a class="header-anchor" href="#手写深拷贝" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">deepClone</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newObj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> [] </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isObj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">temple</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">isObj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">deepClone</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">newObj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">temple</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newObj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="手写防抖节流" tabindex="-1">手写防抖节流 <a class="header-anchor" href="#手写防抖节流" aria-hidden="true">#</a></h2><h2 id="手写-call-apply" tabindex="-1">手写 call apply <a class="header-anchor" href="#手写-call-apply" aria-hidden="true">#</a></h2><h2 id="实现-bind-函数" tabindex="-1">实现 bind 函数 <a class="header-anchor" href="#实现-bind-函数" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 原理：通过apply 或者call 方法来实现。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// (1)初始版本</span></span>
<span class="line"><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newArg</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">arg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">(</span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">newArg</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// (2) 考虑到原型链</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 为什么要考虑？因为在new 一个bind 过生成的新函数的时候，必须的条件是要继承原函数的原型</span></span>
<span class="line"><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bound</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newArg</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">arg</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arg</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">(</span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">slice</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">newArg</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">F</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//这里需要一个寄生组合继承</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">F</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">bound</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">F</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bound</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="手写-promise-promise-all-race-allsettled" tabindex="-1">手写 promise promise.all/race/allSettled <a class="header-anchor" href="#手写-promise-promise-all-race-allsettled" aria-hidden="true">#</a></h2><h2 id="手写限制并发数量" tabindex="-1">手写限制并发数量 <a class="header-anchor" href="#手写限制并发数量" aria-hidden="true">#</a></h2><h2 id="手写数组转树结构" tabindex="-1">手写数组转树结构 <a class="header-anchor" href="#手写数组转树结构" aria-hidden="true">#</a></h2><h2 id="手写解析-url-所有成分" tabindex="-1">手写解析 url 所有成分 <a class="header-anchor" href="#手写解析-url-所有成分" aria-hidden="true">#</a></h2><h2 id="实现一个-compare-函数-比较两个对象是否相同" tabindex="-1">实现一个 compare 函数，比较两个对象是否相同 <a class="header-anchor" href="#实现一个-compare-函数-比较两个对象是否相同" aria-hidden="true">#</a></h2><h2 id="判断链表是否有环" tabindex="-1">判断链表是否有环 <a class="header-anchor" href="#判断链表是否有环" aria-hidden="true">#</a></h2><h2 id="手写-usereducer" tabindex="-1">手写 useReducer <a class="header-anchor" href="#手写-usereducer" aria-hidden="true">#</a></h2><h2 id="函数柯里化" tabindex="-1">函数柯里化 <a class="header-anchor" href="#函数柯里化" aria-hidden="true">#</a></h2><h2 id="长列表的优化方案" tabindex="-1">长列表的优化方案 <a class="header-anchor" href="#长列表的优化方案" aria-hidden="true">#</a></h2><h2 id="使用-hash-路由时-怎么能再刷新后时候自动滚动到页面上次的锚点位置" tabindex="-1">使用 hash 路由时，怎么能再刷新后时候自动滚动到页面上次的锚点位置？ <a class="header-anchor" href="#使用-hash-路由时-怎么能再刷新后时候自动滚动到页面上次的锚点位置" aria-hidden="true">#</a></h2><h2 id="使用-hash-路由时-和-a-标签的锚点相冲突-怎么解决" tabindex="-1">使用 hash 路由时，和 a 标签的锚点相冲突，怎么解决？ <a class="header-anchor" href="#使用-hash-路由时-和-a-标签的锚点相冲突-怎么解决" aria-hidden="true">#</a></h2><h2 id="前端怎样对用户的数据进行加密传输" tabindex="-1">前端怎样对用户的数据进行加密传输 <a class="header-anchor" href="#前端怎样对用户的数据进行加密传输" aria-hidden="true">#</a></h2><h2 id="基于-md5-提升安全性" tabindex="-1">基于 md5 提升安全性 <a class="header-anchor" href="#基于-md5-提升安全性" aria-hidden="true">#</a></h2><h2 id="如何解决-vue-初始化页面闪动问题" tabindex="-1">如何解决 vue 初始化页面闪动问题 <a class="header-anchor" href="#如何解决-vue-初始化页面闪动问题" aria-hidden="true">#</a></h2><ul><li><a href="https://blog.csdn.net/vampire10086/article/details/109161652" target="_blank" rel="noreferrer">vue 初始化页面闪动问题</a></li></ul>`,91),t=[o];function p(r,c,i,h,d,y){return e(),a("div",null,t)}const D=s(n,[["render",p]]);export{u as __pageData,D as default};
