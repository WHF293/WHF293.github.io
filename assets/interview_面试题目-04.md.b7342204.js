import{_ as a,c as s,o as e,e as l}from"./app.c0ecb6b0.js";const y=JSON.parse('{"title":"面试题目-4","description":"","frontmatter":{},"headers":[{"level":2,"title":"说一下 HTML5 drag api","slug":"说一下-html5-drag-api","link":"#说一下-html5-drag-api","children":[]},{"level":2,"title":"说一下 http2.0","slug":"说一下-http2-0","link":"#说一下-http2-0","children":[]},{"level":2,"title":"fetch 发送 post 请求时总是会 发送 2 次请求的原因？","slug":"fetch-发送-post-请求时总是会-发送-2-次请求的原因","link":"#fetch-发送-post-请求时总是会-发送-2-次请求的原因","children":[]},{"level":2,"title":"说一下 web worker","slug":"说一下-web-worker","link":"#说一下-web-worker","children":[]},{"level":2,"title":"html5 、 css3 有哪些新属性","slug":"html5-、-css3-有哪些新属性","link":"#html5-、-css3-有哪些新属性","children":[]},{"level":2,"title":"讲讲 viewport 和移动端布局","slug":"讲讲-viewport-和移动端布局","link":"#讲讲-viewport-和移动端布局","children":[]},{"level":2,"title":"click 在 ios 上有 300ms 延迟，原因及如何解决？","slug":"click-在-ios-上有-300ms-延迟-原因及如何解决","link":"#click-在-ios-上有-300ms-延迟-原因及如何解决","children":[]},{"level":2,"title":"画一个三角形","slug":"画一个三角形","link":"#画一个三角形","children":[]},{"level":2,"title":"画一个 0.5 px 的线","slug":"画一个-0-5-px-的线","link":"#画一个-0-5-px-的线","children":[]},{"level":2,"title":"link 标签和 import 标签的区别","slug":"link-标签和-import-标签的区别","link":"#link-标签和-import-标签的区别","children":[]},{"level":2,"title":"transition 和 animation 的区别","slug":"transition-和-animation-的区别","link":"#transition-和-animation-的区别","children":[]},{"level":2,"title":"position fixed 不生效的原因","slug":"position-fixed-不生效的原因","link":"#position-fixed-不生效的原因","children":[]},{"level":2,"title":"说说前端中的事件流","slug":"说说前端中的事件流","link":"#说说前端中的事件流","children":[]},{"level":2,"title":"说一下事件委托","slug":"说一下事件委托","link":"#说一下事件委托","children":[]},{"level":2,"title":"JS 中的垃圾回收机制","slug":"js-中的垃圾回收机制","link":"#js-中的垃圾回收机制","children":[]},{"level":2,"title":"什么是 eval， 它是做什么的","slug":"什么是-eval-它是做什么的","link":"#什么是-eval-它是做什么的","children":[]},{"level":2,"title":"说一下 CommonJS、AMD 和 CMD","slug":"说一下-commonjs、amd-和-cmd","link":"#说一下-commonjs、amd-和-cmd","children":[]},{"level":2,"title":"== 、 === 、Object.is() 的区别","slug":"、-、object-is-的区别","link":"#、-、object-is-的区别","children":[]},{"level":2,"title":"说一下你理解的 PWA","slug":"说一下你理解的-pwa","link":"#说一下你理解的-pwa","children":[]},{"level":2,"title":"React 类组件的生命周期","slug":"react-类组件的生命周期","link":"#react-类组件的生命周期","children":[]},{"level":2,"title":"说一下 React 的 shouldComponentUpdate","slug":"说一下-react-的-shouldcomponentupdate","link":"#说一下-react-的-shouldcomponentupdate","children":[]},{"level":2,"title":"说一下高阶组件 （HOC）","slug":"说一下高阶组件-hoc","link":"#说一下高阶组件-hoc","children":[]},{"level":2,"title":"为什么建议传递给setState 的参数是一个callback 而不是一个对象","slug":"为什么建议传递给setstate-的参数是一个callback-而不是一个对象","link":"#为什么建议传递给setstate-的参数是一个callback-而不是一个对象","children":[]},{"level":2,"title":"React 类组件的构造函数中调用super(props) 的目的是什么","slug":"react-类组件的构造函数中调用super-props-的目的是什么","link":"#react-类组件的构造函数中调用super-props-的目的是什么","children":[]}],"relativePath":"interview/面试题目-04.md","lastUpdated":1677486550000}'),n={name:"interview/面试题目-04.md"},t=l(`<h1 id="面试题目-4" tabindex="-1">面试题目-4 <a class="header-anchor" href="#面试题目-4" aria-hidden="true">#</a></h1><div class="warning custom-block"><p class="custom-block-title">提示</p><p>待完善</p></div><p><a href="https://juejin.cn/post/7004785942326149157" target="_blank" rel="noreferrer">前端经典面经--助你金九银十面试无忧</a></p><h2 id="说一下-html5-drag-api" tabindex="-1">说一下 HTML5 drag api <a class="header-anchor" href="#说一下-html5-drag-api" aria-hidden="true">#</a></h2><h2 id="说一下-http2-0" tabindex="-1">说一下 http2.0 <a class="header-anchor" href="#说一下-http2-0" aria-hidden="true">#</a></h2><h2 id="fetch-发送-post-请求时总是会-发送-2-次请求的原因" tabindex="-1">fetch 发送 post 请求时总是会 发送 2 次请求的原因？ <a class="header-anchor" href="#fetch-发送-post-请求时总是会-发送-2-次请求的原因" aria-hidden="true">#</a></h2><h2 id="说一下-web-worker" tabindex="-1">说一下 web worker <a class="header-anchor" href="#说一下-web-worker" aria-hidden="true">#</a></h2><h2 id="html5-、-css3-有哪些新属性" tabindex="-1">html5 、 css3 有哪些新属性 <a class="header-anchor" href="#html5-、-css3-有哪些新属性" aria-hidden="true">#</a></h2><ul><li><p>html5：</p><ul><li>8 个语义元素 header section footer aside nav main article figure</li><li>内容元素 mark 高亮 progress 进度</li><li>新的表单控件 calander date time email url search</li><li>新的 input 类型 color date datetime datetime-local email</li><li>移除过时标签 big font frame frameset</li><li>canvas 绘图，支持内联 SVG。支持 MathML</li><li>多媒体 audio video source embed track</li><li>本地离线存储，把需要离线存储在本地的文件列在一个 manifest 配置文件</li><li>web 存储。localStorage、SessionStorage</li></ul></li><li><p>css3：</p><ul><li>CSS3 边框如 border-radius，box-shadow 等；</li><li>CSS3 背景如 background-size，background-origin 等；</li><li>CSS3 2D，3D 转换如 transform 等；</li><li>CSS3 动画如 animation 等</li></ul></li></ul><h2 id="讲讲-viewport-和移动端布局" tabindex="-1">讲讲 viewport 和移动端布局 <a class="header-anchor" href="#讲讲-viewport-和移动端布局" aria-hidden="true">#</a></h2><ul><li><a href="https://github.com/forthealllight/blog/issues/13" target="_blank" rel="noreferrer">响应式布局的常用解决方案对比(媒体查询、百分比、rem 和 vw/vh）</a></li></ul><h2 id="click-在-ios-上有-300ms-延迟-原因及如何解决" tabindex="-1">click 在 ios 上有 300ms 延迟，原因及如何解决？ <a class="header-anchor" href="#click-在-ios-上有-300ms-延迟-原因及如何解决" aria-hidden="true">#</a></h2><ul><li>粗暴型，禁用缩放 &#39;<meta name="viewport" content="width=device-width, user-scalable=no">&#39;</li><li>利用 FastClick，其原理是：检测到 touchend 事件后，立刻出发模拟 click 事件，并且把浏览器 300 毫秒之后真正出发的事件给阻断掉</li></ul><h2 id="画一个三角形" tabindex="-1">画一个三角形 <a class="header-anchor" href="#画一个三角形" aria-hidden="true">#</a></h2><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">border-top</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10px</span><span style="color:#A6ACCD;"> solid red</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">border-right</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10px</span><span style="color:#A6ACCD;"> solid transparent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">border-bottom</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10px</span><span style="color:#A6ACCD;"> solid transparent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#B2CCD6;">border-left</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10px</span><span style="color:#A6ACCD;"> solid transparent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="画一个-0-5-px-的线" tabindex="-1">画一个 0.5 px 的线 <a class="header-anchor" href="#画一个-0-5-px-的线" aria-hidden="true">#</a></h2><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 采用meta viewport 的方式 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">initial-scale=1.0, maximum-scale=1.0, user-scalable=no</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 采用border-image 的方式 --&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 采用transform: scale()的方式 --&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="link-标签和-import-标签的区别" tabindex="-1">link 标签和 import 标签的区别 <a class="header-anchor" href="#link-标签和-import-标签的区别" aria-hidden="true">#</a></h2><ul><li>link 属于 html 标签，而@import 是 css 提供的.</li><li>页面被加载时，link 会同时被加载，而@import 引用的 css 会等到页面加载结束后加载。</li><li>link 是 html 标签，因此没有兼容性，而@import 只有 IE5 以上才能识别。link 方式样式的权重高于@import 的。</li></ul><h2 id="transition-和-animation-的区别" tabindex="-1">transition 和 animation 的区别 <a class="header-anchor" href="#transition-和-animation-的区别" aria-hidden="true">#</a></h2><p>Animation 和 transition 大部分属性是相同的，他们都是随时间改变元素的属性值，他们的主要区别是 transition 需要触发一个事件才能改变属性，而 animation 不需要触发任何事件的情况下才会随时间改变属性值，并且 transition 为 2 帧，从 from .... to，而 animation 可以一帧一帧的。</p><h2 id="position-fixed-不生效的原因" tabindex="-1">position fixed 不生效的原因 <a class="header-anchor" href="#position-fixed-不生效的原因" aria-hidden="true">#</a></h2><h2 id="说说前端中的事件流" tabindex="-1">说说前端中的事件流 <a class="header-anchor" href="#说说前端中的事件流" aria-hidden="true">#</a></h2><p>事件流描述的是从页面中接收事件的顺序,DOM2 级事件流包括下面几个阶段：</p><ul><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ul><h2 id="说一下事件委托" tabindex="-1">说一下事件委托 <a class="header-anchor" href="#说一下事件委托" aria-hidden="true">#</a></h2><p>事件委托指的是，不在事件的发生地（直接 dom）上设置监听函数， 而是在其父元素上设置监听函数，通过事件冒泡，父元素可以监听到子元素上事件的触发， 通过判 断事件发生元素 DOM 的类型，来做出不同的响应。</p><h2 id="js-中的垃圾回收机制" tabindex="-1">JS 中的垃圾回收机制 <a class="header-anchor" href="#js-中的垃圾回收机制" aria-hidden="true">#</a></h2><h2 id="什么是-eval-它是做什么的" tabindex="-1">什么是 eval， 它是做什么的 <a class="header-anchor" href="#什么是-eval-它是做什么的" aria-hidden="true">#</a></h2><p>它的功能是将对应的字符串解析成 JS 并执行，应该避免使用 JS，因为非常消耗性能（2 次，一次解析成 JS，一次执行）</p><h2 id="说一下-commonjs、amd-和-cmd" tabindex="-1">说一下 CommonJS、AMD 和 CMD <a class="header-anchor" href="#说一下-commonjs、amd-和-cmd" aria-hidden="true">#</a></h2><h2 id="、-、object-is-的区别" tabindex="-1">== 、 === 、<a href="http://Object.is" target="_blank" rel="noreferrer">Object.is</a>() 的区别 <a class="header-anchor" href="#、-、object-is-的区别" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// (1) ==</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 主要存在：强制转换成number,null==undefined</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// (2)Object.js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 主要的区别就是+0！=-0 而NaN==NaN</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// (相对比===和==的改进)</span></span>
<span class="line"></span></code></pre></div><h2 id="说一下你理解的-pwa" tabindex="-1">说一下你理解的 PWA <a class="header-anchor" href="#说一下你理解的-pwa" aria-hidden="true">#</a></h2><p>PWA 全称 Progressive Web App，即 <code>渐进式 WEB 应用</code>。</p><p>一个 PWA 应用首先是一个网页,可以通过 Web 技术编写出一个网页应用. 随后添加上 App Manifest 和 Service Worker 来实现 PWA 的安装和离线等功能</p><h2 id="react-类组件的生命周期" tabindex="-1">React 类组件的生命周期 <a class="header-anchor" href="#react-类组件的生命周期" aria-hidden="true">#</a></h2><ol><li>初始化阶段 <code>getDefaultProps</code>:获取实例的默认属性 <code>getInitialState</code>:获取每个实例的初始化状态 <code>componentWillMount</code>：组件即将被装载、渲染到页面上 <code>render</code>:组件在这里生成虚拟的 DOM 节点 <code>componentDidMount</code>:组件真正在被装载之后</li><li>运行中状态 <code>componentWillReceiveProps</code>:组件将要接收到属性的时候调用 <code>shouldComponentUpdate</code>:组件接受到新属性或者新状态的时候（可以返回 false，接收数据 后不更新，阻止 render 调用，后面的函数不会被继续执行了） <code>componentWillUpdate</code>:组件即将更新不能修改属性和状态 <code>render</code>:组件重新描绘 <code>componentDidUpdate</code>:组件已经更新</li><li>销毁阶段： <code>componentWillUnmount</code>:组件即将销毁</li></ol><h2 id="说一下-react-的-shouldcomponentupdate" tabindex="-1">说一下 React 的 shouldComponentUpdate <a class="header-anchor" href="#说一下-react-的-shouldcomponentupdate" aria-hidden="true">#</a></h2><h2 id="说一下高阶组件-hoc" tabindex="-1">说一下高阶组件 （HOC） <a class="header-anchor" href="#说一下高阶组件-hoc" aria-hidden="true">#</a></h2><h2 id="为什么建议传递给setstate-的参数是一个callback-而不是一个对象" tabindex="-1">为什么建议传递给setState 的参数是一个callback 而不是一个对象 <a class="header-anchor" href="#为什么建议传递给setstate-的参数是一个callback-而不是一个对象" aria-hidden="true">#</a></h2><h2 id="react-类组件的构造函数中调用super-props-的目的是什么" tabindex="-1">React 类组件的构造函数中调用super(props) 的目的是什么 <a class="header-anchor" href="#react-类组件的构造函数中调用super-props-的目的是什么" aria-hidden="true">#</a></h2>`,42),o=[t];function i(p,r,c,d,h,D){return e(),s("div",null,o)}const C=a(n,[["render",i]]);export{y as __pageData,C as default};
