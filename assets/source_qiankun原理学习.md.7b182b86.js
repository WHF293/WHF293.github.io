import{_ as s,c as n,o as a,e as l}from"./app.e2717202.js";const A=JSON.parse('{"title":"qiankun 原理学习","description":"","frontmatter":{},"headers":[{"level":2,"title":"qiankun 的特点","slug":"qiankun-的特点","link":"#qiankun-的特点","children":[{"level":3,"title":"qiankun 和 single-spa 的区别","slug":"qiankun-和-single-spa-的区别","link":"#qiankun-和-single-spa-的区别","children":[]},{"level":3,"title":"qiankun registerMicoApp","slug":"qiankun-registermicoapp","link":"#qiankun-registermicoapp","children":[]}]},{"level":2,"title":"快速学习乾坤实现流程","slug":"快速学习乾坤实现流程","link":"#快速学习乾坤实现流程","children":[{"level":3,"title":"qiankun 的整个流程","slug":"qiankun-的整个流程","link":"#qiankun-的整个流程","children":[]},{"level":3,"title":"加载解析 html","slug":"加载解析-html","link":"#加载解析-html","children":[]},{"level":3,"title":"css 外部样式处理","slug":"css-外部样式处理","link":"#css-外部样式处理","children":[]},{"level":3,"title":"js 沙箱处理","slug":"js-沙箱处理","link":"#js-沙箱处理","children":[]},{"level":3,"title":"加载外部 js 资源","slug":"加载外部-js-资源","link":"#加载外部-js-资源","children":[]},{"level":3,"title":"从入口文件获取生命周期钩子函数","slug":"从入口文件获取生命周期钩子函数","link":"#从入口文件获取生命周期钩子函数","children":[]}]},{"level":2,"title":"qiankun js 沙箱具体实现思路","slug":"qiankun-js-沙箱具体实现思路","link":"#qiankun-js-沙箱具体实现思路","children":[{"level":3,"title":"SnapshotSandbox 快照沙箱","slug":"snapshotsandbox-快照沙箱","link":"#snapshotsandbox-快照沙箱","children":[]},{"level":3,"title":"LegacySandbox 单例沙箱","slug":"legacysandbox-单例沙箱","link":"#legacysandbox-单例沙箱","children":[]},{"level":3,"title":"ProxySandbox 多例沙箱","slug":"proxysandbox-多例沙箱","link":"#proxysandbox-多例沙箱","children":[]},{"level":3,"title":"js 沙箱总结","slug":"js-沙箱总结","link":"#js-沙箱总结","children":[]}]},{"level":2,"title":"qiankun css 沙箱具体实现思路","slug":"qiankun-css-沙箱具体实现思路","link":"#qiankun-css-沙箱具体实现思路","children":[{"level":3,"title":"shadow Dom 沙箱","slug":"shadow-dom-沙箱","link":"#shadow-dom-沙箱","children":[]},{"level":3,"title":"scoped Css 沙箱","slug":"scoped-css-沙箱","link":"#scoped-css-沙箱","children":[]},{"level":3,"title":"qiankun css 解决方案","slug":"qiankun-css-解决方案","link":"#qiankun-css-解决方案","children":[]}]}],"relativePath":"source/qiankun原理学习.md","lastUpdated":1678073130000}'),p={name:"source/qiankun原理学习.md"},o=l(`<h1 id="qiankun-原理学习" tabindex="-1">qiankun 原理学习 <a class="header-anchor" href="#qiankun-原理学习" aria-hidden="true">#</a></h1><ul><li><a href="https://qiankun.umijs.org/zh/guide" target="_blank" rel="noreferrer">qiankun 官网</a></li></ul><h2 id="qiankun-的特点" tabindex="-1">qiankun 的特点 <a class="header-anchor" href="#qiankun-的特点" aria-hidden="true">#</a></h2><ul><li>📦 基于 single-spa 封装，提供了更加开箱即用的 API。</li><li>📱 技术栈无关，任意技术栈的应用均可 使用/接入。</li><li>💪 HTML Entry 接入方式，让你接入微应用像使用 iframe 一样简单。</li><li>🛡​ 样式隔离，确保微应用之间样式互相不干扰。</li><li>🧳 JS 沙箱，确保微应用之间 全局变量/事件 不冲突。</li><li>⚡️ 资源预加载，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。</li></ul><h3 id="qiankun-和-single-spa-的区别" tabindex="-1">qiankun 和 single-spa 的区别 <a class="header-anchor" href="#qiankun-和-single-spa-的区别" aria-hidden="true">#</a></h3><blockquote><p>qiankun 是基于 single-spa 封装的</p></blockquote><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li><p>single-spa 的思想： single-spa 认为任何一个 web 前端应用都可以被打包成一个 js 模块，这样的话对于一个巨石应用来说，就可以拆分成一个主应用 + 若干个子应用（js 模块），在主应用通过 jsonp 的方式请求对应的 js 模块(子应用), 并将其插入到主应用即可实现巨石应用的拆分</p></li><li><p>qiankun 的思想：qiankun 是基于 single-spa 实现的，底层的 api 用的都是 single-spa 的 api，但是针对 single-spa 的缺点进行了优化。</p><ol><li>qiankun 认为打包后的入口文件不应该是 js 模块，而是一个 html 文件</li><li>针对 single-spa 没有 js 隔离和 css 隔离的缺陷，为我们提供了 3 种 js 沙箱和 2 种 css 沙箱用于隔离 js 和 css</li><li>简化了主应用和子应用的接入成本，为我们提供更简便的 api</li><li>为我们提供了子应用预加载和子应用缓存的功能</li></ol></li></ul></div><table><thead><tr><th></th><th>注册子应用的 api</th><th>请求的资源</th><th>支持子应用预加载</th><th>支持子应用缓存</th></tr></thead><tbody><tr><td>single-spa</td><td>registerApplication</td><td>js</td><td>不支持</td><td>不支持</td></tr><tr><td>qiankun</td><td>registerMicoApp</td><td>html</td><td>支持</td><td>支持</td></tr></tbody></table><p>registerMicoApp 是对 registerApplication 进行了一次封装</p><h3 id="qiankun-registermicoapp" tabindex="-1">qiankun registerMicoApp <a class="header-anchor" href="#qiankun-registermicoapp" aria-hidden="true">#</a></h3><p>首先就是 registerMicoApp 的使用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">registerMicroApps</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">app1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">//localhost:8080</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">container</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#container</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">activeRule</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> microApps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">RegistrableApp</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">unknown</span><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">registerMicroApps</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ObjectType</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">apps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">RegistrableApp</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#A6ACCD;font-style:italic;">lifeCycles</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FrameworkLifeCycles</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 获取还没有注册过的 子应用</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 每个应用只需要注册一次，避免多次调用 registerMicroApps 函数同时注册了相同的应用</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">unregisteredApps</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">apps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">microApps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">some</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">registeredApp</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">registeredApp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">microApps</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">microApps</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">unregisteredApps</span><span style="color:#F07178;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">unregisteredApps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">app</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">activeRule</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">loader</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">noop</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">appConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">registerApplication</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 子应用名称，必须唯一</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">app</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 1. 加载和解析\`html\`资源，获取页面、样式资源链接、脚本资源链接三种数据</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 2. 对外部样式资源（css）进行加载处理，生成\`render\`函数</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 3. 生成 \`js\`沙箱</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 4. 加载外部脚本资源（js），且进行包装、执行</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 5. 从入口文件里获取生命周期钩子函数：\`bootstrap\`、\`mount\`、\`unmount\`，</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 然后当作registerApplication的app形参中的返回数据，如下所示</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">loader</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">frameworkStartedDefer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">promise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mount</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">otherMicroAppConfigs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">loadApp</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">appConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">frameworkConfiguration</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">lifeCycles</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#F07178;">          )</span></span>
<span class="line"><span style="color:#F07178;">        )()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          mount</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">loader</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">...</span><span style="color:#82AAFF;">toArray</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">mount</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">loader</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">otherMicroAppConfigs</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 子应用激活路径</span></span>
<span class="line"><span style="color:#F07178;">      activeWhen</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">activeRule</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 需要传递给子应用的数据</span></span>
<span class="line"><span style="color:#F07178;">      customProps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="快速学习乾坤实现流程" tabindex="-1">快速学习乾坤实现流程 <a class="header-anchor" href="#快速学习乾坤实现流程" aria-hidden="true">#</a></h2><ul><li><a href="https://juejin.cn/post/7202246519080304697" target="_blank" rel="noreferrer">不懂 qiankun 原理?这篇文章五张图片带你迅速通晓</a></li></ul><h3 id="qiankun-的整个流程" tabindex="-1">qiankun 的整个流程 <a class="header-anchor" href="#qiankun-的整个流程" aria-hidden="true">#</a></h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d0eb49c886b496e8ff36fb5060ba00d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt=""></p><h3 id="加载解析-html" tabindex="-1">加载解析 html <a class="header-anchor" href="#加载解析-html" aria-hidden="true">#</a></h3><p>qiankun 使用了 import-html-entry 这个库去处理 html 资源，并通过正则将 html 解析为下面几个模块</p><ul><li>template</li><li>scripts</li><li>entry</li><li>styles</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6440eadfdde409ebf67e7949e25e14c~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt=""></p><h3 id="css-外部样式处理" tabindex="-1">css 外部样式处理 <a class="header-anchor" href="#css-外部样式处理" aria-hidden="true">#</a></h3><p>比如入口的 html 文件中引入了 main.css, 在 html 解析的时候，对应的 css 文件引入代码在 template 里面会先被注释掉并打上标记</p><p>等第一步解析完成之后，再去请求 styles 里面的资源信息，在成功获取后在插入到 template 中标记的地方</p><p>成功合并之后生成新的 template，在根据新的 template 生成响应的 render 函数</p><p>render 在把我们的子应用挂载到父应用上对应的节点上</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67ffc1e220624a91a92b9176e5e7c82b~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt=""></p><h3 id="js-沙箱处理" tabindex="-1">js 沙箱处理 <a class="header-anchor" href="#js-沙箱处理" aria-hidden="true">#</a></h3><p>js 沙箱 <code>用于隔离应用间的 window 环境，防止子应用在执行代码期间影响了其他应用设置在 window 上的属性</code></p><p>qiankun 为我们提供了 3 种 js 沙箱</p><table><thead><tr><th></th><th>名称</th><th>原理简述</th></tr></thead><tbody><tr><td><code>SnapshotSandbox</code></td><td>快照沙箱</td><td>保存快照，diff</td></tr><tr><td><code>LegacySandbox</code></td><td>单例沙箱</td><td>window 变化监听 + diff</td></tr><tr><td><code>ProxySandbox</code></td><td>多例沙箱</td><td>proxy 代理和 window 相同属性方法的纯对象</td></tr></tbody></table><blockquote><p>具体差别可以看下文的 沙箱实现思路 部分</p></blockquote><p>ProxySandbox：</p><ol><li>window 上的全部属性复制到一个纯对象里面</li><li>使用 proxy 代理这个纯对象 <ul><li>子应用如果访问的属性是在设置的白名单（比如 window 上原本就有的属性、方法）里面的话，那会先把 window 上原先的值复制一份，子应用可以直接访问/修改 window 上对应的属性，子应用销毁时再把备份的数据重新给 window 上对的对应属性赋值</li><li>如果不在白名单里面，访问 / 修改的就是纯对象里的数据，window 上的属性不会被访问 / 改变</li></ul></li></ol><blockquote><p>ProxySandbox 缺点：这种沙箱只能隔离 Window 的一级属性。因为 Proxy 只会捕获到一级属性的增删改，不能捕获到二级以上属性的变动</p></blockquote><h3 id="加载外部-js-资源" tabindex="-1">加载外部 js 资源 <a class="header-anchor" href="#加载外部-js-资源" aria-hidden="true">#</a></h3><p>使用上一步的沙箱对请求到的 js 资源进行包装</p><p>例如我们要请求一个 <code>http://xxxx:xxx/main.bunlde.xxx.js</code> 文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main.bunlde.xxx.js</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">b</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">b</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">a</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>使用沙箱封装</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">self</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">globalThis</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// with 语句的主要作用是将代码的作用域设置到一个特定的对象中，简化多次编写同一个对象的工作</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">with</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#82AAFF;">b</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">b</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#82AAFF;">a</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">proxy</span><span style="color:#F07178;">)(</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">proxy</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">proxy</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">proxy</span></span>
<span class="line"><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4613f4f4e96c4b569ed929d81d8842db~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt=""></p><h3 id="从入口文件获取生命周期钩子函数" tabindex="-1">从入口文件获取生命周期钩子函数 <a class="header-anchor" href="#从入口文件获取生命周期钩子函数" aria-hidden="true">#</a></h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/44b96e3a18114c88ab0621db2cf4f103~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt=""></p><h2 id="qiankun-js-沙箱具体实现思路" tabindex="-1">qiankun js 沙箱具体实现思路 <a class="header-anchor" href="#qiankun-js-沙箱具体实现思路" aria-hidden="true">#</a></h2><p>qiankun 沙箱发展时间线</p><ul><li><a href="https://juejin.cn/post/7148075486403362846" target="_blank" rel="noreferrer">Qiankun 原理——JS 沙箱是怎么做隔离的</a></li></ul><p>qiankun 为我们提供了 3 种 js 沙箱</p><blockquote><p><code>SnapshotSandbox</code> --&gt; 优化 --&gt; <code>LegacySandbox</code> --&gt; es6 的 proxy 普及，再次优化 --&gt; <code>ProxySandbox</code></p></blockquote><h3 id="snapshotsandbox-快照沙箱" tabindex="-1"><code>SnapshotSandbox</code> 快照沙箱 <a class="header-anchor" href="#snapshotsandbox-快照沙箱" aria-hidden="true">#</a></h3><ul><li>将原本的 window 上的属性复制出来一份另外保存</li><li>子应用修改 window 上的属性</li><li>子应用卸载，diff window 和之前另外保存的那份数据，找出 diff 结果，保存 diff 结果</li><li>使用备份数据恢复原先 window 上的属性</li><li>子应用再次挂载时，将之前保存的 diff 结果重新赋值到 window 上</li></ul><blockquote><p>缺点：如果给 window 上自定义了上千个属性，那么每次子应用挂载、卸载每次 diff 都要花费较大的性能开销，而且同一时间内只能有存在一个子应用，若页面需要同时出现两个子应用则会出现异常，简单概括会<code>污染全局 window</code></p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20621cb0fcad4b079473bba57cbece43~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt=""></p><h3 id="legacysandbox-单例沙箱" tabindex="-1"><code>LegacySandbox</code> 单例沙箱 <a class="header-anchor" href="#legacysandbox-单例沙箱" aria-hidden="true">#</a></h3><p>针对上面每次都需要大量 diff 操作带来的性能消耗，qiankun 提供了另一种沙箱实现方式，就是监听 window 上的修改来记录 diff 内容</p><ul><li>子应用修改 window 属性 <ul><li>修改的是原本就有的属性 <ul><li>分别记录新的值和旧的值</li></ul></li><li>新增的属性 <ul><li>记录下来</li></ul></li></ul></li><li>子应用卸载时 <ul><li>直接从 window 上把前面新增的属于移除</li><li>对于原本就有的属性，使用保存的旧值直接替换</li></ul></li></ul><blockquote><p>缺点：和快照沙箱一样，同样是会 <code>污染全局 window</code> 且只能存在单例子应用</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7ad2165ee3a4c68aab88a59a303d182~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt=""></p><h3 id="proxysandbox-多例沙箱" tabindex="-1"><code>ProxySandbox</code> 多例沙箱 <a class="header-anchor" href="#proxysandbox-多例沙箱" aria-hidden="true">#</a></h3><p>为了解决只能使用单例的问题，qiankun 又提出了另一种沙箱形式——代理沙箱</p><p>为每个子应用单独代理一个 window 对象，大致实现可以看前面 <code>[js 沙箱处理]</code> 部分</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6aebde8492943bba6420a0027f09027~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt=""></p><h3 id="js-沙箱总结" tabindex="-1">js 沙箱总结 <a class="header-anchor" href="#js-沙箱总结" aria-hidden="true">#</a></h3><ul><li>SnapshotSandbox：记录 window 对象，每次 unmount 都要和微应用的环境进行 Diff</li><li>LegacySandbox：在微应用修改 <a href="http://window.xxx" target="_blank" rel="noreferrer">window.xxx</a> 时直接记录 Diff，将其用于环境恢复</li><li>ProxySandbox：为每个微应用分配一个 fakeWindow，当微应用操作 window 时，其实是在 fakeWindow 上操作</li></ul><h2 id="qiankun-css-沙箱具体实现思路" tabindex="-1">qiankun css 沙箱具体实现思路 <a class="header-anchor" href="#qiankun-css-沙箱具体实现思路" aria-hidden="true">#</a></h2><blockquote><p><code>qiankun 的沙箱可以确保单实例场景子应用之间的样式隔离，但是无法确保主应用跟子应用、或者多实例场景的子应用样式隔离。</code></p></blockquote><h3 id="shadow-dom-沙箱" tabindex="-1"><code>shadow Dom</code> 沙箱 <a class="header-anchor" href="#shadow-dom-沙箱" aria-hidden="true">#</a></h3><p><code>strictStyleIsolation: true</code></p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_shadow_DOM" target="_blank" rel="noreferrer">MDN-shadow DOM</a></li><li><a href="https://segmentfault.com/a/1190000019115050" target="_blank" rel="noreferrer">深入理解 Shadow DOM v1</a></li></ul><div class="warning custom-block"><p class="custom-block-title">shadow Dom</p><ul><li>封装</li></ul><p>封装是面向对象编程的基本特性，它使程序员能够限制对某些对象组件的未授权访问。</p><p>在此定义下，对象以公共访问方法的形式提供接口作为与其数据交互的方式。这样对象的内部表示不能直接被对象的外部访问。</p><ul><li>Shadow DOM</li></ul><p>Shadow DOM 将此概念引入 HTML，它允许你将隐藏的，分离的 DOM 链接到元素，这意味着你可以使用 HTML 和 CSS 的本地范围。</p><p>现在可以用更通用的 CSS 选择器而不必担心命名冲突，并且样式不再泄漏或被应用于不恰当的元素。</p></div><p>通常我们将正常的 dom 节点叫做 light dom，用于区分正常 dom 和 shadow dom</p><p>缺点：</p><ul><li>组件库问题，比如常见的弹窗、提示条等，组件库一般都是挂载到 body 下面的，但是 shadow 会隔离 css，导致子应用里对这些挂载在 body 下的组件失去样式控制</li><li>事件代理问题，如 react 是通过自己的合成事件机制处理事件的，即所有事件都要冒泡到 body 元素来进行处理，但 shadow dom 包裹的元素其对应的事件不会冒泡到 body</li></ul><h3 id="scoped-css-沙箱" tabindex="-1"><code>scoped Css</code> 沙箱 <a class="header-anchor" href="#scoped-css-沙箱" aria-hidden="true">#</a></h3><p><code>experimentalStyleIsolation: true</code></p><p>qiankun 会改写子应用所添加的样式，为所有样式规则增加一个特殊的选择器规则来限定其影响范围</p><p>类似如下：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* 我们自己写的 css 类名 */</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">app-main</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">14px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* 转化之后的 css 类名 */</span></span>
<span class="line"><span style="color:#FFCB6B;">div</span><span style="color:#89DDFF;">[</span><span style="color:#C792EA;">data-qiankun-子应用名称</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">app-main</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">font-size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">14px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这个就有点想 vue 的 css scoped 了</p><p>缺点：</p><ul><li>@keyframes , @font-face , @import , @page 不被支持</li><li>子应用 css 中的 var 变量会丢失</li><li>同 shadow dom，组件库那些挂载在 body 下的组件样式丢失</li></ul><h3 id="qiankun-css-解决方案" tabindex="-1">qiankun css 解决方案 <a class="header-anchor" href="#qiankun-css-解决方案" aria-hidden="true">#</a></h3><ul><li>vue：可以使用自己的 css scoped 减少样式冲突，针对少部分异常样式可以针对性修改</li><li>react： 使用 css module 代替，如 xxx.module.less / xxx.module.scss / xxx.module.css</li><li>使用 tailwind / windicss / unocss 等原子化的 css 框架</li></ul>`,83),e=[o];function t(c,r,i,y,F,D){return a(),n("div",null,e)}const C=s(p,[["render",t]]);export{A as __pageData,C as default};
