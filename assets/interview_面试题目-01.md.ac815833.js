import{_ as s,c as l,o as a,e as n}from"./app.c0ecb6b0.js";const D=JSON.parse('{"title":"面试题目-1","description":"","frontmatter":{},"headers":[{"level":2,"title":"写出 css 中 position 的属性以及含义","slug":"写出-css-中-position-的属性以及含义","link":"#写出-css-中-position-的属性以及含义","children":[]},{"level":2,"title":"写出清除浮动的方法","slug":"写出清除浮动的方法","link":"#写出清除浮动的方法","children":[]},{"level":2,"title":"写出 css 优先级，介绍 a 标签所含有的伪类","slug":"写出-css-优先级-介绍-a-标签所含有的伪类","link":"#写出-css-优先级-介绍-a-标签所含有的伪类","children":[]},{"level":2,"title":"数组去重(包含 NaN)","slug":"数组去重-包含-nan","link":"#数组去重-包含-nan","children":[]},{"level":2,"title":"简述浏览器 输入地址到页面完整展示过程中会发生什么","slug":"简述浏览器-输入地址到页面完整展示过程中会发生什么","link":"#简述浏览器-输入地址到页面完整展示过程中会发生什么","children":[]},{"level":2,"title":"环境不限， 判断一个变量的类型有哪些方法","slug":"环境不限-判断一个变量的类型有哪些方法","link":"#环境不限-判断一个变量的类型有哪些方法","children":[]},{"level":2,"title":"简述一下对闭包的理解","slug":"简述一下对闭包的理解","link":"#简述一下对闭包的理解","children":[]},{"level":2,"title":"JSON.stringify() 方法的其他参数","slug":"json-stringify-方法的其他参数","link":"#json-stringify-方法的其他参数","children":[]},{"level":2,"title":"JS 事件循环机制的宏任务/微任务","slug":"js-事件循环机制的宏任务-微任务","link":"#js-事件循环机制的宏任务-微任务","children":[]},{"level":2,"title":"说一下 vuex 的大致原理","slug":"说一下-vuex-的大致原理","link":"#说一下-vuex-的大致原理","children":[]},{"level":2,"title":"浏览器进程","slug":"浏览器进程","link":"#浏览器进程","children":[]},{"level":2,"title":"不同标签页之间怎么通信","slug":"不同标签页之间怎么通信","link":"#不同标签页之间怎么通信","children":[]},{"level":2,"title":"小程序 setData 是同步还是异步","slug":"小程序-setdata-是同步还是异步","link":"#小程序-setdata-是同步还是异步","children":[]}],"relativePath":"interview/面试题目-01.md","lastUpdated":1677486550000}'),e={name:"interview/面试题目-01.md"},o=n(`<h1 id="面试题目-1" tabindex="-1">面试题目-1 <a class="header-anchor" href="#面试题目-1" aria-hidden="true">#</a></h1><p><a href="https://juejin.cn/post/6996505288715010061" target="_blank" rel="noreferrer">2021 年-七月-上海-前端-面试总结</a></p><h2 id="写出-css-中-position-的属性以及含义" tabindex="-1">写出 css 中 position 的属性以及含义 <a class="header-anchor" href="#写出-css-中-position-的属性以及含义" aria-hidden="true">#</a></h2><ul><li>static： 默认，没有定位，元素处于正常的文档流中</li><li>relative： 相对定位，相对于自身再正常文档流中的位置偏移</li><li>absolute： 绝对定位，相对于除了static定位以外的第一个父元素进行定位</li><li>fixed： 固定定位， 相对于浏览器窗口定位</li><li>inherit：继承父元素定位方式</li><li>sticky： 粘性定位， css3 新加的，主要用在对 scroll 事件的监听上；简单来说，在滑动过程中，某个元素距离其父元素的距离达到 sticky粘性定位的要求时</li></ul><h2 id="写出清除浮动的方法" tabindex="-1">写出清除浮动的方法 <a class="header-anchor" href="#写出清除浮动的方法" aria-hidden="true">#</a></h2><ol><li>使用 clear</li><li>父元素结束标签之前插入清除浮动的块级元素</li><li>利用伪元素（clearfix）</li><li>利用overflow清除浮动</li></ol><h2 id="写出-css-优先级-介绍-a-标签所含有的伪类" tabindex="-1">写出 css 优先级，介绍 a 标签所含有的伪类 <a class="header-anchor" href="#写出-css-优先级-介绍-a-标签所含有的伪类" aria-hidden="true">#</a></h2><ul><li>important</li><li>内联 (1000)</li><li>ID选择器 (100)</li><li>类/伪类、属性选择器（10）</li><li>元素、伪元素选择器（1）。</li></ul><h2 id="数组去重-包含-nan" tabindex="-1">数组去重(包含 NaN) <a class="header-anchor" href="#数组去重-包含-nan" aria-hidden="true">#</a></h2><ul><li>[...new Set(arr)]</li><li>for 循环 + indexof / includes / Map</li></ul><h2 id="简述浏览器-输入地址到页面完整展示过程中会发生什么" tabindex="-1">简述浏览器 输入地址到页面完整展示过程中会发生什么 <a class="header-anchor" href="#简述浏览器-输入地址到页面完整展示过程中会发生什么" aria-hidden="true">#</a></h2><ul><li>输入url</li><li>查询浏览器缓存 <ul><li>强缓存是否过期</li></ul></li><li>DNS 解析 （获取服务器 ip）</li><li>tcp 3次握手 （https 还需要简历 TLS 连接）</li><li>服务器响应 <ul><li>304 协商缓存</li><li>服务器返回数据</li></ul></li><li>构建 dom / cssDom 树</li><li>回流重绘 <ul><li><code>回流</code>：发生在浏览器渲染页面的过程里，由DOM树和样式计算出布局树的过程就叫做回流，这个步骤需要计算出每个元素的大小和位置（忽略display:none的元素）</li><li><code>重绘</code>：将布局树和样式转换为屏幕上的实际像素，这个阶段就叫做重绘节点。所以，回流必定导致重绘，重绘却不一定回流，且回流的代价比重绘高。</li></ul></li></ul><h2 id="环境不限-判断一个变量的类型有哪些方法" tabindex="-1">环境不限， 判断一个变量的类型有哪些方法 <a class="header-anchor" href="#环境不限-判断一个变量的类型有哪些方法" aria-hidden="true">#</a></h2><ul><li>typeof target</li><li>target instanceof targetType</li><li>Object.prototype.toString.call(target)</li><li>Array.isArray(target)</li></ul><h2 id="简述一下对闭包的理解" tabindex="-1">简述一下对闭包的理解 <a class="header-anchor" href="#简述一下对闭包的理解" aria-hidden="true">#</a></h2><p>闭包： <code>闭包就是有权访问另一个函数作用域中内部变量或数据的函数</code></p><p>使用场景：</p><ul><li>setTimeout</li><li>IIFE 立即执行函数</li></ul><p>缺点：</p><p>使用闭包会包含其他函数的作用域，会比其他函数占据更多的内存空间，不会在调用结束之后被垃圾回收机制（简称GC机制）回收，多度使用闭包会过度占用内存，造成内存泄漏</p><p>闭包一定会造成内存泄漏吗？</p><p>不是，比如我们再 window 上设置了一个变量，让后再函数中去使用这个变量，这实际上就形成了闭包，但由于变量是可控的明确的，所以不会造成内存泄漏</p><h2 id="json-stringify-方法的其他参数" tabindex="-1">JSON.stringify() 方法的其他参数 <a class="header-anchor" href="#json-stringify-方法的其他参数" aria-hidden="true">#</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">whf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">，</span></span>
<span class="line"><span style="color:#A6ACCD;">    age： </span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>1 不使用参数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(obj))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &quot;{ &quot;name&quot; : &quot;whf&quot;, &quot;age&quot; : 20 }&quot;</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>第二个参数是数组</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [name]))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &quot;{ &quot;name&quot; : &quot;whf&quot;}&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [name age]))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &quot;{ &quot;name&quot; : &quot;whf&quot;, &quot;age&quot; : 20 }&quot;</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li>第二个参数是函数</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">undefined</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &quot;{&quot;age&quot; : 20 }&quot;</span></span>
<span class="line"></span></code></pre></div><ol start="4"><li>第三个参数是数字</li></ol><p>如果参数是一个数字，则字符串化中的每个级别都将缩进这个数量的空格字符。</p><blockquote><ul><li>在这里代表空格</li></ul></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// --&quot;name&quot;: &quot;whf&quot;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// --&quot;age&quot;: 20,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span></code></pre></div><ol start="5"><li>第三个参数是字符串</li></ol><p>如果参数是一个数字，则字符串化中的每个级别都将缩进这个数量的空格字符。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">**</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// **&quot;name&quot;: &quot;whf&quot;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// **&quot;age&quot;: 20,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span>
<span class="line"></span></code></pre></div><h2 id="js-事件循环机制的宏任务-微任务" tabindex="-1">JS 事件循环机制的宏任务/微任务 <a class="header-anchor" href="#js-事件循环机制的宏任务-微任务" aria-hidden="true">#</a></h2><ul><li><a href="https://juejin.cn/post/6844903638238756878#heading-0" target="_blank" rel="noreferrer">JS事件循环机制（event loop）之宏任务/微任务</a></li></ul><blockquote><p>事件循环就是先确定事件的执行规则，然后按照这个规则循环执行</p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f42b0a9e84b34ec789f52b4a04ff1e66~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt=""></p><p>event loop</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a2d41823dce4fb19784cc6bbda4385d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt=""></p><ul><li>宏任务: script、setTimeout、setInterval、setImmediate</li><li>微任务: Promise、process.nextTick、MutationObserver</li></ul><hr><ul><li>主线程同步任务执行完毕 <ul><li>宏任务执行</li><li>是否有微任务 <ul><li>有 <ul><li>执行所有微任务</li><li>开始新的宏任务</li></ul></li><li>无 <ul><li>开始新的宏任务</li></ul></li></ul></li></ul></li></ul><h2 id="说一下-vuex-的大致原理" tabindex="-1">说一下 vuex 的大致原理 <a class="header-anchor" href="#说一下-vuex-的大致原理" aria-hidden="true">#</a></h2><p>可以看我实现的乞丐版 vuex</p><h2 id="浏览器进程" tabindex="-1">浏览器进程 <a class="header-anchor" href="#浏览器进程" aria-hidden="true">#</a></h2><p>浏览器从开启到关闭，然后新开一个页面所需要的进程</p><ul><li>不同标签页共享的进程 <ul><li>浏览器进程: 负责标签页之外的界面，包括地址栏，书签，收藏夹等</li><li>GPU 进程</li><li>网络进程</li></ul></li><li>标签页独享进程 <ul><li>渲染进程： 每个标签页都有自己独立的渲染进程 <ul><li>GUI 线程：负责渲染页面，生成 dom tree、cssDom tree、回流重绘</li><li>js 引擎线程： 一个标签页只有一个 js 线程，负责解析和执行 js 代码，和渲染进程互斥</li><li>计时器线程： 指 setInterval和setTimeout</li><li>异步http请求线程： XHR 连接后浏览器开的一个线程</li><li>事件触发线程： 主要用来控制事件循环</li></ul></li></ul></li><li>隔离进程： 避免无关进程奔溃影响到页面 <ul><li>插件进程：只有插件运行时才会开启</li></ul></li></ul><h2 id="不同标签页之间怎么通信" tabindex="-1">不同标签页之间怎么通信 <a class="header-anchor" href="#不同标签页之间怎么通信" aria-hidden="true">#</a></h2><ul><li>localStorage</li><li>web-socket</li><li>postMessage</li></ul><h2 id="小程序-setdata-是同步还是异步" tabindex="-1">小程序 setData 是同步还是异步 <a class="header-anchor" href="#小程序-setdata-是同步还是异步" aria-hidden="true">#</a></h2><ul><li>在<code>逻辑层的操作是同步</code>，因此this.data中的相关数据会立即更新；</li><li>在<code>视图层的操作是异步</code>，因此页面渲染可能并不会立即发生。</li></ul><p>webview -- jsBright -- worker</p>`,56),t=[o];function p(i,c,r,y,u,d){return a(),l("div",null,t)}const F=s(e,[["render",p]]);export{D as __pageData,F as default};
